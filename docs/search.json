[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Botzool Data Analysis",
    "section": "",
    "text": "This is a website for the study materials related to the courses on data analysis at the Department of Botany and Zoology, Faculty of Science, Masaryk University.\nThe related courses are:\n\nBi7540 Analýza dat v ekologii společenstev\nBi7542 Data analysis in community ecology\nBi8190 Manipulace a vizualizace dat v R (Data manipulation and visualisation in R)\n\nMoreover, this website contains guidelines for the use of AI in ecology.\n\nWebsite Navigation\n\nData Analysis in Community Ecology\nData Manipulation and Visualisation\nAI",
    "crumbs": [
      "Home"
    ]
  },
  {
    "objectID": "DataManipulationVisualisation/3_data_visualisation.html",
    "href": "DataManipulationVisualisation/3_data_visualisation.html",
    "title": "3 Data Visualisation",
    "section": "",
    "text": "In this chapter, we will cover the basics of data visualisation using the ggplot2 package in R. ggplot2 uses a conceptual framework called Grammar of Graphics , which allows you to compose graphs by combining independent components. Every graph produced with ggplot2 can be built from the same components: data, a coordinate system and geoms (visual marks representing data points). That is what makes ggplot2 so powerful. We will now explore how to create various types of plots, customize them, and save them for publications or presentations.\nSo let’s start. ggplot2 is a part of tidyverse, so you should have it installed already, and you can load it by running:\nlibrary(tidyverse)\nThis is a line that should appear at the beginning of each of your new scripts.\nTo make a plot, we first need some data. We will use a dataset of size measurements for three penguin species observed on three islands in the Palmer Achipelago (Antarctica).\nTo get the data, we need to load another package (if you get an error message, that there is no such package, install it first):\nlibrary(palmerpenguins)\nBefore plotting, we can briefly look at the data structure:\nglimpse(penguins)\n\nRows: 344\nColumns: 8\n$ species           &lt;fct&gt; Adelie, Adelie, Adelie, Adelie, Adelie, Adelie, Adel…\n$ island            &lt;fct&gt; Torgersen, Torgersen, Torgersen, Torgersen, Torgerse…\n$ bill_length_mm    &lt;dbl&gt; 39.1, 39.5, 40.3, NA, 36.7, 39.3, 38.9, 39.2, 34.1, …\n$ bill_depth_mm     &lt;dbl&gt; 18.7, 17.4, 18.0, NA, 19.3, 20.6, 17.8, 19.6, 18.1, …\n$ flipper_length_mm &lt;int&gt; 181, 186, 195, NA, 193, 190, 181, 195, 193, 190, 186…\n$ body_mass_g       &lt;int&gt; 3750, 3800, 3250, NA, 3450, 3650, 3625, 4675, 3475, …\n$ sex               &lt;fct&gt; male, female, female, NA, female, male, female, male…\n$ year              &lt;int&gt; 2007, 2007, 2007, 2007, 2007, 2007, 2007, 2007, 2007…\nThe dataset contains information about 344 penguins, and there are 8 different variables. You can read more about them in the documentation by running ?penguins.",
    "crumbs": [
      "Data Manipulation and Visualization",
      "3 Data visualisation"
    ]
  },
  {
    "objectID": "DataManipulationVisualisation/3_data_visualisation.html#getting-started-scatterplot",
    "href": "DataManipulationVisualisation/3_data_visualisation.html#getting-started-scatterplot",
    "title": "3 Data Visualisation",
    "section": "3.1 Getting started: scatterplot",
    "text": "3.1 Getting started: scatterplot\nWe will now visualise the relationship between the different dimensions of the penguin bill:\n\n\n\n\n\nVisualisation with ggplot2 starts with the function ggplot(). This will define a plot object, where you can then add layers. The first argument to this function is data, which specifies which data to use for plotting. Running the following will create an empty plot, an empty canvas prepared for plotting desired layers onto.\n\nggplot(data = penguins)\n\n\n\n\n\n\n\n\nNext, we have to tell ggplot() how the data should be visualised. For this, we specify the mapping argument, which is always defined by the aes() function (aesthetics). The x and y arguments of the aes() function specify, which variables to map to the x and y axes of the plot.\n\nggplot(data = penguins, \n       mapping = aes(x = bill_length_mm, y = bill_depth_mm))\n\n\n\n\n\n\n\n\nThe ggplot() now knows which variables will be displayed on each axes and added the axis names and value ranges to our empty plot. However, we still didn’t provide any information about how the data point should be displayed. To do so, we define a geom, geometrical object to represent the data. ggplot2 provides a wide variety of possible geometries, all defined by functions starting with geom_. Boxplots are drawn using boxplot geoms (geom_boxplot()), bar charts use bar geoms (geom_bar()), line charts use line geoms (geom_line()), scatterplots use point geoms (geom_point()), etc. We now aim to create a scatterplot, which means adding points to our plot using the geom_point() function:\n\nggplot(data = penguins, \n       mapping = aes(x = bill_length_mm, y = bill_depth_mm)) +\n  geom_point()\n\nWarning: Removed 2 rows containing missing values or values outside the scale range\n(`geom_point()`).\n\n\n\n\n\n\n\n\n\nNow, the plot with a point for each row in the data appears. However, there is a warning message in the console, which tells us that 2 rows contained missing values or values outside of the scale range. We didn’t set any limit for x or y axis, so it most likely means there are some missing values in the data. We will not focus on this point now, but the ideal next step would be to check the data, where the missing values appeared and why. If possible, correct missing data in the original data, load new data and continue.\nNote that we use + for adding layers to ggplot() instead of %&gt;% or |&gt;. This is because + in ggplot() existed earlier than the pipe was discovered. It might be confusing and a cause errors, but don’t worry, R will tell you what’s wrong if it happens:\n\nggplot(data = penguins, \n       mapping = aes(x = bill_length_mm, y = bill_depth_mm)) |&gt; \n  geom_point()\n\nError in `geom_point()`:\n! `mapping` must be created by `aes()`.\nℹ Did you use `%&gt;%` or `|&gt;` instead of `+`?\n\n\nWhen we look at the scatterplot, there doesn’t appear to be a clear relationship between the penguin bill length and bill depth. Let’s add one more layer to our plot to check the relationship. To add a line based on linear regression, we use geom_smooth function with method = 'lm':\n\nggplot(data = penguins, \n       mapping = aes(x = bill_length_mm, y = bill_depth_mm)) +\n  geom_point() + \n  geom_smooth(method = 'lm')\n\n\n\n\n\n\n\n\nNow it seems there is a slightly negative relationship, which is a bit contrary to the expectations. Moreover, if we focus on the positions of the points in the scatterplot are a bit clustered. Let’s recall the structure of our data. We have measurements of three different species in the dataset. What if this is the cause? Let’s incorporate the species identity into our visualisation. We can do this by adding colour to the points. For this we need to modify the aesthetics:\n\nggplot(data = penguins, \n       mapping = aes(x = bill_length_mm, y = bill_depth_mm, colour = species)) +\n  geom_point() + \n  geom_smooth(method = 'lm')\n\n\n\n\n\n\n\n\nNow it is clear that species identity is really important and the relationship between the bill dimensions is in fact positive. This is a classical example of the Simpson’s paradox (a relationship appears in several groups of data, but disappears of reverses when the groups are combined).\nIn addition to the colour, we can also distinguish species in the plot by adding shape aesthetics.\n\nggplot(data = penguins, \n       mapping = aes(x = bill_length_mm, y = bill_depth_mm, colour = species, shape = species)) +\n  geom_point() + \n  geom_smooth(method = 'lm')\n\n\n\n\n\n\n\n\nNote that the legend is automatically updated to reflect both the different colours and shapes of the points.\nLet’s play a bit more with the different shapes and colours, the points could be better distinguished from each other if the points were black-delimited. This might be changed by the specification of scale for the shape aesthetics. Bounded shapes with coloured inside are 21-25 and we want to use the circle, square and triangle:\n\n\nggplot(data = penguins, \n       mapping = aes(x = bill_length_mm, y = bill_depth_mm, colour = species, shape = species)) +\n  geom_point() + \n  geom_smooth(method = 'lm') + \n  scale_shape_manual(values = c(21, 22, 24))\n\n\n\n\n\n\n\n\nOh, but this is not what we wanted, the shapes have only coloured boundaries, but no fill. Let’s make it correctly. The fill colour is specified by the fill aesthetics, so we have to add this one. Moreover, the colour aesthetics is now specified directly in the ggplot() function, which means it applies to all layers in the plot. But we want all points to have black borders, so the colour should apply only to the lines. We can do this by moving the colour aesthetics to the geom_smooth() layer.\n\nggplot(data = penguins, \n       mapping = aes(x = bill_length_mm, y = bill_depth_mm, fill = species, shape = species)) +\n  geom_point() + \n  geom_smooth(aes(colour = species), method = 'lm') + \n  scale_shape_manual(values = c(21, 22, 24))\n\n\n\n\n\n\n\n\nMuch nicer! Note that adding the fill aesthetics to the ggplot() also changed the colour of the confidence intervals for the regression lines.\nThe legend is now showing all aesthetics differentiating the groups in the plot. Maybe we don’t need to display all of them. It would be enough to display a legend for the points, because the lines have the same colours. We can switch off legend for a given layer using show.legend = F:\n\nggplot(data = penguins, \n       mapping = aes(x = bill_length_mm, y = bill_depth_mm, fill = species, shape = species)) +\n  geom_point() + \n  geom_smooth(aes(colour = species), method = 'lm', show.legend = F) + \n  scale_shape_manual(values = c(21, 22, 24))\n\n\n\n\n\n\n\n\nTo make the plot more publication-ready, we should pay more attention to the axes labels. We can change them using the labs() function. To rename the legend, we have to specify labels for all aesthetics used to distinguish the different categories.\n\nggplot(data = penguins, \n       mapping = aes(x = bill_length_mm, y = bill_depth_mm, fill = species, shape = species)) +\n  geom_point() + \n  geom_smooth(aes(colour = species), method = 'lm', show.legend = F) + \n  scale_shape_manual(values = c(21, 22, 24)) + \n  labs(x = 'Bill length (mm)', y = 'Bill depth (mm)', fill = 'Species', shape = 'Species', colour = 'Species')\n\n\n\n\n\n\n\n\nAlmost publication-ready, except the grey background is not very nice. It might be easily remove by adding a different theme. One of our favourites is theme_bw(), meaning black and white, but you can experiment with different ones or even define your own.\n\nggplot(data = penguins, \n       mapping = aes(x = bill_length_mm, y = bill_depth_mm, fill = species, shape = species)) +\n  geom_point() + \n  geom_smooth(aes(colour = species), method = 'lm', show.legend = F) + \n  scale_shape_manual(values = c(21, 22, 24)) + \n  labs(x = 'Bill length (mm)', y = 'Bill depth (mm)', fill = 'Species', shape = 'Species', colour = 'Species') + \n  theme_bw()\n\n\n\n\n\n\n\n\nThis is our final plot showing the relationship between penguin bill dimensions of three different species.",
    "crumbs": [
      "Data Manipulation and Visualization",
      "3 Data visualisation"
    ]
  },
  {
    "objectID": "DataManipulationVisualisation/3_data_visualisation.html#histogram",
    "href": "DataManipulationVisualisation/3_data_visualisation.html#histogram",
    "title": "3 Data Visualisation",
    "section": "3.2 Histogram",
    "text": "3.2 Histogram\nLet’s explore the dataset more and take a look at different plot types. For example, we can look at the distribution of the penguin body mass using a histogram. We only specify x aesthetics here, because the histogram divides x-axis into equally spaced bins and then uses the height of the bar to display the number of observations that fall into each bin. The binwidth argument sets the width of the bins.\n\nggplot(penguins, aes(x = body_mass_g)) +\n  geom_histogram(binwidth = 200)\n\n\n\n\n\n\n\n\nFor now, we will not go into detail on how to improve the appearance of this plot, you can take it as an exercise and experiment with it on your own.",
    "crumbs": [
      "Data Manipulation and Visualization",
      "3 Data visualisation"
    ]
  },
  {
    "objectID": "DataManipulationVisualisation/3_data_visualisation.html#boxplot",
    "href": "DataManipulationVisualisation/3_data_visualisation.html#boxplot",
    "title": "3 Data Visualisation",
    "section": "3.3 Boxplot",
    "text": "3.3 Boxplot\nThere is surely also a difference between different penguin species. We can visualise the differences using a boxplot:\n\nggplot(penguins, aes(x = species, y = body_mass_g)) +\n  geom_boxplot()\n\n\n\n\n\n\n\n\nWe can also colour the boxes using the fill aesthetics. To make this plot nicer, we will again change the theme of the plot. We can also change the label of the y axis, while the label of the x axis is a bit redundant and it would be better to remove it. This might be done within the theme() function. That’s where we can customise the properties of different plot components, such as axis labels, legend or background grid lines. To remove the given component, we set the argument to element_blank().\n\nggplot(penguins, aes(x = species, y = body_mass_g, fill = species)) +\n  geom_boxplot() + \n  labs(y = 'Body mass (g)', fill = 'Species') + \n  theme_bw() + \n  theme(axis.title.x = element_blank())",
    "crumbs": [
      "Data Manipulation and Visualization",
      "3 Data visualisation"
    ]
  },
  {
    "objectID": "DataManipulationVisualisation/3_data_visualisation.html#bar-chart",
    "href": "DataManipulationVisualisation/3_data_visualisation.html#bar-chart",
    "title": "3 Data Visualisation",
    "section": "3.4 Bar chart",
    "text": "3.4 Bar chart\nTo examine the distribution of a categorical variable, we can use a bar chart. The penguin measurements come from three different islands, let’s see how the distribution of measurement across the islands looks like:\n\nggplot(penguins, aes(x = island)) +\n  geom_bar()\n\n\n\n\n\n\n\n\nAnd were all three penguin species measured at each of the three islands? We can see that when we map species using the fill aesthetics. The colour would control the border colour of the bars. We can also set that all bars should have black borders by setting colour = 'black' in geom_bar. We can also directly modify the theme and plot labels.\n\nggplot(penguins, aes(x = island, fill = species)) +\n  geom_bar(colour = 'black') + \n  labs(x = 'Island', y = 'Number of individuals', fill = 'Species') + \n  theme_bw()\n\n\n\n\n\n\n\n\nInstead of the number of individuals, we can also display the relative frequency of different species at the islands by setting position = 'fill'.\n\nggplot(penguins, aes(x = island, fill = species)) +\n  geom_bar(colour = 'black', position = 'fill') + \n  labs(x = 'Island', y = 'Relative frequency', fill = 'Species') + \n  theme_bw()",
    "crumbs": [
      "Data Manipulation and Visualization",
      "3 Data visualisation"
    ]
  },
  {
    "objectID": "DataManipulationVisualisation/3_data_visualisation.html#saving-your-plots",
    "href": "DataManipulationVisualisation/3_data_visualisation.html#saving-your-plots",
    "title": "3 Data Visualisation",
    "section": "3.5 Saving your plots",
    "text": "3.5 Saving your plots\nOnce you are satisfied with your plot, it is a good idea to save it as an image. The best way to save a plot from ggplot() is to use the ggsave() function. You have to specify the name of your file. Good practice is to save all plots to a dedicated folder, for example plots. By default, the last plot displayed in the viewer pane will be saved, and the dimensions will be the same as the current extent of the viewer pane. It is not the best idea to rely on this because the size of the plot will change every time you change the extent of your viewer pane. Therefore, it is a good practice to set the size of your figure using the width and height arguments. Sometimes it requires a bit of experimentation, but since you figure out the optimal settings, you can redraw the plot as many times as you want and always save it with the same dimensions.\n\nggsave('plots/island_relative_frequency.png', width = 6, height = 4)",
    "crumbs": [
      "Data Manipulation and Visualization",
      "3 Data visualisation"
    ]
  },
  {
    "objectID": "DataManipulationVisualisation/3_data_visualisation.html#exercises",
    "href": "DataManipulationVisualisation/3_data_visualisation.html#exercises",
    "title": "3 Data Visualisation",
    "section": "3.6 Exercises",
    "text": "3.6 Exercises\n\nUse the dataset Axmanova-Forest-understory-diversity-analyses.xslx and visualise the relationship between species richness of forest herb layer and the tree canopy cover. Is the relationship the same in different forest types?\nDraw a boxplot showing the differences in forest herb layer species richness in different forest types. Which forest type appears to be the most species-rich? * Would there be another way to visualise the relationship between the herb-layer species richness and forest type? Explore the ggplot extensions gallery and find a different plot type that might be useful here.\nLoad data of squirrel observations from the Central Park Squirrel Census using this line: read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/main/data/2023/2023-05-23/squirrel_data.csv') Squirrels of which colour were the most common? Draw a barplot to visualise the differences. * Try to find a way to colour the bars with colours resembling the squirrel colours.\nLoad the Pokemon dataset using this line: read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/main/data/2025/2025-04-01/pokemon_df.csv'). Visualise the distribution of Pokémon weights. * Try to use at least two different geom functions.\n* How would you transform the variable before an analysis? Find a way to visualise the distribution on a transformed scale using a ggplot function.\nWhat is the relationship between the attack and special attack power of water-type Pokémons?\nWhich Pokémon type has the highest attack power? Visualise the relationship.\nExplore the relationship between the Pokémon attack and defense power. Distinguish different Pokémon types. * When using different colors for many categories, the plot gets quite messy, try to come up with a solution to distinguish the Pokémon types more clearly in the plot.\nModify axis labels, legend, colours, etc. of all plots you created so far, so that you like their appearance and save them to the folder plots.",
    "crumbs": [
      "Data Manipulation and Visualization",
      "3 Data visualisation"
    ]
  },
  {
    "objectID": "DataManipulationVisualisation/3_data_visualisation.html#further-reading",
    "href": "DataManipulationVisualisation/3_data_visualisation.html#further-reading",
    "title": "3 Data Visualisation",
    "section": "3.7 Further reading",
    "text": "3.7 Further reading\nggplot2 vignette: https://ggplot2.tidyverse.org\nR 4 Data Science: https://r4ds.hadley.nz/data-visualize.html\nCheatsheet: https://rstudio.github.io/cheatsheets/html/data-visualization.html\nggplot2: Elegant Graphics for Data Analysis (3e): https://ggplot2-book.org\nR Graphics Cookbook: https://r-graphics.org\nggplot Extensions: https://exts.ggplot2.tidyverse.org",
    "crumbs": [
      "Data Manipulation and Visualization",
      "3 Data visualisation"
    ]
  },
  {
    "objectID": "DataManipulationVisualisation/1_introduction.html",
    "href": "DataManipulationVisualisation/1_introduction.html",
    "title": "1 Introduction",
    "section": "",
    "text": "In this chapter, we will train how to get ready for analyses in R. Preparing the project, starting a script, importing data and their first exploration. We will follow the rules for preparing reproducible, reportable, clean and tidy workflow and scripts.\nYou already know that R is a programming language and environment for statistical analysis and data visualisation. R is free and open-source, available from the CRAN directory. R is extended by a large number of software packages, which contain reusable code, documentation, and sample data. In this course, we will focus in the first place on the tidyverse collection of packages, which are designed for everyday data handling and visualisation (see more here).\nWe will work with R using the interface called RStudio IDE, in short RStudio, which is an integrated development environment for R and can be downloaded here.\nTO DO: install R, RStudio and tidyverse package. Having trouble and need advice? Try further reading section at the end of this chapter or come and ask before the first lesson.",
    "crumbs": [
      "Data Manipulation and Visualization",
      "1 Introduction"
    ]
  },
  {
    "objectID": "DataManipulationVisualisation/1_introduction.html#introducing-tidyverse",
    "href": "DataManipulationVisualisation/1_introduction.html#introducing-tidyverse",
    "title": "1 Introduction",
    "section": "1.1. Introducing Tidyverse",
    "text": "1.1. Introducing Tidyverse\n\n\n\n\n\nTidyverse is a collection of R packages for transforming and visualizing data, which share an underlying philosophy (tidy data, tibbles, %&gt;%) and common interface. When you install the tidyverse, you get all the core packages at once, namely\n\nreadr for data importing\n\ndplyr with tools for data manipulation (e.g. select, filter, arrange, mutate…)\ntidyr with functions that help you get to tidy data and transform their format (e.g.pivot)\ntibble introducing simple dataframes called tibbles\nggplot2 package for data visualisation\nstringrfor working with strings, matching defined patterns, clean unwanted parts\nforcats which enables easier work with factors\nlubridatehelping to work with date-times\npurr which offers complete and consistent set of tools for working with functions and vectors, introduces map function instead of complicated loops\n\nIn addition you get automatically installed also several more packages, which share the same approach, although developed later or by someone else, for example - readxl elegant direct import from Excel files - magrittrpackage where the pipe was originally introduced, including double-sided pipe\nFind more about tidyverse here or check cheatsheets and vignettes for individual packages.\nRemember, that all the core packages are activated within the tidyverse library\n\nlibrary(tidyverse)\n\nwhile for the extra ones you have to use an extra call\n\nlibrary(readxl)\n\n\n1.1.1 Tidy data\nData that are easy to handle and analyse. \nFind more in the R for data science book https://r4ds.hadley.nz/\n\n\n1.1.2 Tibbles\nTibbles are new, updated versions of base-R data frames. They are designed to work better with other tidyverse packages. In contrast to data frames, tibbles never convert the type of the inputs (e.g. strings to factors), they never change the names of variables, and they never create row names. Example:\n\ndata &lt;- read_excel(\"data/forest_understory/Axmanova-Forest-understory-diversity-analyses.xlsx\")\ntibble (data)\n\n# A tibble: 65 × 22\n   PlotID ForestType ForestTypeName      Herbs Juveniles CoverE1 Biomass\n    &lt;dbl&gt;      &lt;dbl&gt; &lt;chr&gt;               &lt;dbl&gt;     &lt;dbl&gt;   &lt;dbl&gt;   &lt;dbl&gt;\n 1      1          2 oak hornbeam forest    26        12      20    12.8\n 2      2          1 oak forest             13         3      25     9.9\n 3      3          1 oak forest             14         1      25    15.2\n 4      4          1 oak forest             15         5      30    16  \n 5      5          1 oak forest             13         1      35    20.7\n 6      6          1 oak forest             16         3      60    46.4\n 7      7          1 oak forest             17         5      70    49.2\n 8      8          2 oak hornbeam forest    21         1      70    48.7\n 9      9          2 oak hornbeam forest    15         4      15    13.8\n10     10          1 oak forest             14         4      75    79.1\n# ℹ 55 more rows\n# ℹ 15 more variables: Soil_depth_categ &lt;dbl&gt;, pH_KCl &lt;dbl&gt;, Slope &lt;dbl&gt;,\n#   Altitude &lt;dbl&gt;, Canopy_E3 &lt;dbl&gt;, Radiation &lt;dbl&gt;, Heat &lt;dbl&gt;,\n#   TransDir &lt;dbl&gt;, TransDif &lt;dbl&gt;, TransTot &lt;dbl&gt;, EIV_light &lt;dbl&gt;,\n#   EIV_moisture &lt;dbl&gt;, `EIV_soil-reaction` &lt;dbl&gt;, EIV_nutrients &lt;dbl&gt;,\n#   TWI &lt;dbl&gt;\n\n\n\n\n1.1.3 Pipes %&gt;%\nThe Tidyverse tools use a pipe: %&gt;% or |&gt; The pipe allows the output of a previous command to be used as input to another command instead of using nested functions. It means, pipe binds individual steps into a sequence and it reads from left to right. In base R the logic of reading is from inside out and you have to save all the steps separately.\nSee this example of the same steps with different approaches&gt;\nBase R method\n\ndata &lt;- read_excel(\"data/forest_understory/Axmanova-Forest-understory-diversity-analyses.xlsx\")\n# 1. Create new variable in the data\ndata$Productivity &lt;- ifelse(data$Biomass &lt; 60, \"low\", \"high\")\n\n# 2. Select only some columns, save as new dataframe\ndf &lt;- data[, c(\"PlotID\", \"ForestTypeName\", \"Productivity\", \"pH_KCl\")]\n\n# 3. Order by soil pH (descending)\ndf &lt;- df[order(df$pH_KCl, decreasing = TRUE), ]\n\n# 4. Keep only the first 20 rows with highest pH\ndf_top20 &lt;- df[1:20, ]\n\n# 5. Print the resulting subset to see which forest types grow in the high pH soils and if they have rather low or high productivity\ndf_top20\n\n# A tibble: 20 × 4\n   PlotID ForestTypeName      Productivity pH_KCl\n    &lt;dbl&gt; &lt;chr&gt;               &lt;chr&gt;         &lt;dbl&gt;\n 1    104 alluvial forest     high           7.14\n 2    103 alluvial forest     high           7.13\n 3    128 ravine forest       high           7.03\n 4    111 alluvial forest     high           7.01\n 5    114 ravine forest       high           6.93\n 6    123 ravine forest       low            6.91\n 7    105 ravine forest       high           6.78\n 8    122 ravine forest       high           6.68\n 9    101 alluvial forest     high           6.67\n10    119 oak hornbeam forest low            6.63\n11    113 alluvial forest     high           6.61\n12    120 oak hornbeam forest high           6.42\n13    115 ravine forest       low            6.03\n14    110 alluvial forest     high           5.82\n15    121 oak hornbeam forest high           5.77\n16    112 oak hornbeam forest low            5.76\n17    130 ravine forest       high           5.74\n18    129 alluvial forest     high           5.7 \n19    127 alluvial forest     high           5.56\n20    132 alluvial forest     high           5.56\n\n\nPiping (the same steps, but just in one line)\n\ndata &lt;- read_excel(\"data/forest_understory/Axmanova-Forest-understory-diversity-analyses.xlsx\") %&gt;%\n  mutate(Productivity = ifelse(Biomass &lt; 100, \"low\", \"high\")) %&gt;%\n  select(PlotID, ForestTypeName, Productivity, pH_KCl) %&gt;%\n  arrange(desc(pH_KCl)) %&gt;%\n  slice_head(n = 20) %&gt;%\n  print()\n\n# A tibble: 20 × 4\n   PlotID ForestTypeName      Productivity pH_KCl\n    &lt;dbl&gt; &lt;chr&gt;               &lt;chr&gt;         &lt;dbl&gt;\n 1    104 alluvial forest     high           7.14\n 2    103 alluvial forest     high           7.13\n 3    128 ravine forest       high           7.03\n 4    111 alluvial forest     low            7.01\n 5    114 ravine forest       low            6.93\n 6    123 ravine forest       low            6.91\n 7    105 ravine forest       low            6.78\n 8    122 ravine forest       high           6.68\n 9    101 alluvial forest     low            6.67\n10    119 oak hornbeam forest low            6.63\n11    113 alluvial forest     low            6.61\n12    120 oak hornbeam forest low            6.42\n13    115 ravine forest       low            6.03\n14    110 alluvial forest     high           5.82\n15    121 oak hornbeam forest low            5.77\n16    112 oak hornbeam forest low            5.76\n17    130 ravine forest       high           5.74\n18    129 alluvial forest     high           5.7 \n19    127 alluvial forest     high           5.56\n20    132 alluvial forest     high           5.56\n\n\nNote: It is even possible to overwrite original dataset with an assignment pipe %&lt;&gt;% included in magrittr package. We will try to avoid this in our lessons, as it cannot be undone.\nTip: Insert a pipe by ctrl+shift+M",
    "crumbs": [
      "Data Manipulation and Visualization",
      "1 Introduction"
    ]
  },
  {
    "objectID": "DataManipulationVisualisation/1_introduction.html#effective-and-reproducible-workflow",
    "href": "DataManipulationVisualisation/1_introduction.html#effective-and-reproducible-workflow",
    "title": "1 Introduction",
    "section": "1.2. Effective and reproducible workflow",
    "text": "1.2. Effective and reproducible workflow\nThere are several rules to make your workflow effective and reproducible after some time or by other people.\n\n1.2.1 Projects\nIf you start your work by setting the working directory, the reproducibility by someone else is very limited (see more here). Good habit is to organize each data analysis into a project: a folder on your computer that holds all the files relevant to that particular piece of work.\nR Studio easily enables creating projects and switching between them (either through File-Open/New/Recent Project or by clicking on the upper right corner icon for projects). \nTip: get used to creating the same subfolders in each of your project: data, scripts, results, maps, backup etc. to further organise the project structure.\n\n\n1.2.2 Scripts\nlibraries - list all the libraries your code need at the beginning of the script\n\nlibrary(tidyverse)\nlibrary(readxl)\n\nremarks\n- add notes to your scripts, you will be grateful later\n- change the text to non-active (marked with hash tags #) ctrl + shift + C\nseparate scripts or sections\n- insert named section using ctrl + shift + R\n- or divide the code by ####\n- fold all sections with Alt + O\n- unfold all with Shift + Alt + O\nnames of variables\n- should be short and easy to handle, without spaces, strange symbols\n- rename strange names one by one\nTip: rename gives first the new name\n\n# data %&gt;% rename (ReleveNr = \"Releve number\")\n\n- or change all difficult patterns at once, using RegEx Regular expressions\n\ndata &lt;- data %&gt;%\n   rename_all(~ str_replace_all(., c(\n    \"\\\\.\" = \"\",     #remove dots in the variable names\n    \"\\\\mÂ²\" = \"m2\",\n    \"\\\\Â°\" = \"deg\",\n    \"\\\\%\" = \"perc\", # remove symbol % and change it to perc\n    \"\\\\(\" = \"\",\n    \"\\\\)\" = \"\",\n    \"\\\\/\" = \"\",\n    \"\\\\?\" = \"\",\n    \"\\\\s\", \".\"))) #remove spaces\n\n- or use the function clean_names from package janitor",
    "crumbs": [
      "Data Manipulation and Visualization",
      "1 Introduction"
    ]
  },
  {
    "objectID": "DataManipulationVisualisation/1_introduction.html#data-import",
    "href": "DataManipulationVisualisation/1_introduction.html#data-import",
    "title": "1 Introduction",
    "section": "1.3 Data import",
    "text": "1.3 Data import\nimport data with Tidyverse: readr, readxl (see cheatsheet)\ncheck the folder content\n\nlist.files() #all files in the working=project directory\n\n [1] \"1_introduction.qmd\"                  \"1_introduction.rmarkdown\"           \n [3] \"10_database_to_plot.html\"            \"10_database_to_plot.qmd\"            \n [5] \"11_github.html\"                      \"11_github.qmd\"                      \n [7] \"2_data_manipulation.qmd\"             \"3_data_visualisation.qmd\"           \n [9] \"4_wide_vs_long.qmd\"                  \"5_join_functions.qmd\"               \n[11] \"6_advanced_visualisation.qmd\"        \"7_automatisation.qmd\"               \n[13] \"8_maps.qmd\"                          \"9_advanced_maps.qmd\"                \n[15] \"data\"                                \"data_manipulation_visualisation.qmd\"\n[17] \"images\"                              \"plots\"                              \n[19] \"scripts\"                            \n\nlist.files(\"data\") #content of data folder\n\n[1] \"acidophilous_grasslands\" \"basiphilous_grasslands\" \n[3] \"forest_understory\"       \"messy_data\"             \n\nlist.files(\"data/forest-understory\") #content of subfolder\n\ncharacter(0)\n\n\nwe will work with the forest dataset, try importing different data\n\ndata &lt;- read_excel(\"data/forest_understory/Axmanova-Forest-understory-diversity-analyses.xlsx\")\n\nfew tips how to check the structure\n\ntibble(data)\n\n# A tibble: 65 × 22\n   PlotID ForestType ForestTypeName      Herbs Juveniles CoverE1 Biomass\n    &lt;dbl&gt;      &lt;dbl&gt; &lt;chr&gt;               &lt;dbl&gt;     &lt;dbl&gt;   &lt;dbl&gt;   &lt;dbl&gt;\n 1      1          2 oak hornbeam forest    26        12      20    12.8\n 2      2          1 oak forest             13         3      25     9.9\n 3      3          1 oak forest             14         1      25    15.2\n 4      4          1 oak forest             15         5      30    16  \n 5      5          1 oak forest             13         1      35    20.7\n 6      6          1 oak forest             16         3      60    46.4\n 7      7          1 oak forest             17         5      70    49.2\n 8      8          2 oak hornbeam forest    21         1      70    48.7\n 9      9          2 oak hornbeam forest    15         4      15    13.8\n10     10          1 oak forest             14         4      75    79.1\n# ℹ 55 more rows\n# ℹ 15 more variables: Soil_depth_categ &lt;dbl&gt;, pH_KCl &lt;dbl&gt;, Slope &lt;dbl&gt;,\n#   Altitude &lt;dbl&gt;, Canopy_E3 &lt;dbl&gt;, Radiation &lt;dbl&gt;, Heat &lt;dbl&gt;,\n#   TransDir &lt;dbl&gt;, TransDif &lt;dbl&gt;, TransTot &lt;dbl&gt;, EIV_light &lt;dbl&gt;,\n#   EIV_moisture &lt;dbl&gt;, `EIV_soil-reaction` &lt;dbl&gt;, EIV_nutrients &lt;dbl&gt;,\n#   TWI &lt;dbl&gt;\n\nnames(data)\n\n [1] \"PlotID\"            \"ForestType\"        \"ForestTypeName\"   \n [4] \"Herbs\"             \"Juveniles\"         \"CoverE1\"          \n [7] \"Biomass\"           \"Soil_depth_categ\"  \"pH_KCl\"           \n[10] \"Slope\"             \"Altitude\"          \"Canopy_E3\"        \n[13] \"Radiation\"         \"Heat\"              \"TransDir\"         \n[16] \"TransDif\"          \"TransTot\"          \"EIV_light\"        \n[19] \"EIV_moisture\"      \"EIV_soil-reaction\" \"EIV_nutrients\"    \n[22] \"TWI\"              \n\nglimpse(data)\n\nRows: 65\nColumns: 22\n$ PlotID              &lt;dbl&gt; 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 14, 16, 18, 28,…\n$ ForestType          &lt;dbl&gt; 2, 1, 1, 1, 1, 1, 1, 2, 2, 1, 1, 2, 2, 2, 1, 2, 1,…\n$ ForestTypeName      &lt;chr&gt; \"oak hornbeam forest\", \"oak forest\", \"oak forest\",…\n$ Herbs               &lt;dbl&gt; 26, 13, 14, 15, 13, 16, 17, 21, 15, 14, 12, 30, 24…\n$ Juveniles           &lt;dbl&gt; 12, 3, 1, 5, 1, 3, 5, 1, 4, 4, 4, 3, 7, 3, 1, 2, 2…\n$ CoverE1             &lt;dbl&gt; 20, 25, 25, 30, 35, 60, 70, 70, 15, 75, 8, 30, 60,…\n$ Biomass             &lt;dbl&gt; 12.8, 9.9, 15.2, 16.0, 20.7, 46.4, 49.2, 48.7, 13.…\n$ Soil_depth_categ    &lt;dbl&gt; 5.0, 4.5, 3.0, 3.0, 3.0, 6.0, 7.0, 5.0, 3.5, 5.0, …\n$ pH_KCl              &lt;dbl&gt; 5.28, 3.24, 4.01, 3.77, 3.50, 3.80, 3.48, 3.68, 4.…\n$ Slope               &lt;dbl&gt; 4, 24, 13, 21, 0, 10, 6, 0, 38, 13, 29, 47, 33, 24…\n$ Altitude            &lt;dbl&gt; 412, 458, 414, 379, 374, 380, 373, 390, 255, 340, …\n$ Canopy_E3           &lt;dbl&gt; 80, 80, 80, 75, 70, 65, 65, 85, 80, 70, 85, 60, 75…\n$ Radiation           &lt;dbl&gt; 0.8813, 0.9329, 0.9161, 0.9305, 0.8691, 0.9178, 0.…\n$ Heat                &lt;dbl&gt; 0.8575, 0.8138, 0.8503, 0.9477, 0.8691, 0.8834, 0.…\n$ TransDir            &lt;dbl&gt; 3.72, 4.05, 4.38, 3.48, 3.73, 3.59, 4.49, 3.97, 3.…\n$ TransDif            &lt;dbl&gt; 2.83, 2.83, 2.94, 2.96, 3.15, 3.40, 2.87, 2.99, 2.…\n$ TransTot            &lt;dbl&gt; 6.55, 6.88, 7.31, 6.44, 6.88, 6.99, 7.36, 6.96, 6.…\n$ EIV_light           &lt;dbl&gt; 5.00, 4.71, 4.36, 5.26, 6.14, 6.19, 6.19, 5.29, 5.…\n$ EIV_moisture        &lt;dbl&gt; 4.38, 4.64, 4.70, 4.38, 4.00, 4.35, 4.25, 4.60, 4.…\n$ `EIV_soil-reaction` &lt;dbl&gt; 6.68, 4.67, 4.80, 5.53, 5.33, 6.75, 6.09, 5.07, 5.…\n$ EIV_nutrients       &lt;dbl&gt; 4.31, 3.69, 3.55, 3.56, 3.46, 5.06, 4.33, 4.12, 3.…\n$ TWI                 &lt;dbl&gt; 3.353962, 2.419177, 2.159580, 1.651170, 4.741780, …\n\ntable(data$ForestTypeName)\n\n\n    alluvial forest          oak forest oak hornbeam forest       ravine forest \n                 11                  16                  28                  10",
    "crumbs": [
      "Data Manipulation and Visualization",
      "1 Introduction"
    ]
  },
  {
    "objectID": "DataManipulationVisualisation/1_introduction.html#where-to-find-help",
    "href": "DataManipulationVisualisation/1_introduction.html#where-to-find-help",
    "title": "1 Introduction",
    "section": "1.4 Where to find help",
    "text": "1.4 Where to find help\nMotto: Majority of the problems in R can be solved if you know how to ask and where.\nKnowing that I am lost in “Regular expressions” already helps to ask more specifically.\n\nCheatsheets\nR studio help\nR studio community https://forum.posit.co/\nVignettes\nStack Overflow. You probably already came across Stack Overflow if you were trying to Google something, as it suggests answers to coding related questions. It is a good environment to ask questions or try to find if somebody already asked the same things before. Be specific about the coding style. E.g. How to separate variable using tidyverse?\nGitHub\nAI tools\n\nOr just come and ask!",
    "crumbs": [
      "Data Manipulation and Visualization",
      "1 Introduction"
    ]
  },
  {
    "objectID": "DataManipulationVisualisation/1_introduction.html#exercises",
    "href": "DataManipulationVisualisation/1_introduction.html#exercises",
    "title": "1 Introduction",
    "section": "1.5 Exercises",
    "text": "1.5 Exercises\nFor exercises we will use either data that are published somewhere and give you the link, or we will ask you to download the data from the repository and save it into your project folder https://github.com/BotzoolDataAnalysis/BotzoolDataAnalysis.github.io/tree/a3803acec824e44acae72b4cac405d6bb538030b/DataManipulationVisualisation/data\nThere will be some obligatory tasks, while voluntarily tasks will be marked by *.\nIn this chapter: 1. Create project for this lesson, add subfolders, namely data (download the data), and scripts. Prepare script with your notes, separated into sections. 2. Create another project and script, try switching between. 3. Download data from xxx, save them into your data folder and import them to the working environment, … 2. *Find a cheatsheet for readxl and find out how to import second sheet of Excel file. 3. Try import of a file via Rstudio and describe pros/cons. 4. Check the xxx, in the folder messy data, try to fix them and import. 5. *Do you know what is reprex and how to prepare it?",
    "crumbs": [
      "Data Manipulation and Visualization",
      "1 Introduction"
    ]
  },
  {
    "objectID": "DataManipulationVisualisation/1_introduction.html#further-reading",
    "href": "DataManipulationVisualisation/1_introduction.html#further-reading",
    "title": "1 Introduction",
    "section": "1.6 Further reading",
    "text": "1.6 Further reading\nRStudio: Download and basic information https://posit.co/download/rstudio-desktop/\nDavid Zelený: Tutorial how to install R and Rstudio https://www.davidzeleny.net/anadat-r/doku.php/en:r\nDatacamp: Tutorial for R studio https://www.datacamp.com/tutorial/r-studio-tutorial?utm_cid=19589720821&utm_aid=157156375351&utm_campaign=230119_1-ps-other~dsa~tofu_2-b2c_3-emea_4-prc_5-na_6-na_7-le_8-pdsh-go_9-nb-e_10-na_11-na&utm_loc=9209603-&utm_mtd=-c&utm_kw=&utm_source=google&utm_medium=paid_search&utm_content=ps-other~emea-en~dsa~tofu~tutorial-r-programming&gad_source=1&gad_campaignid=19589720821&gbraid=0AAAAADQ9WsGYLLxwdtiAlqFG_Qtdjkbvf&gclid=CjwKCAjwt-_FBhBzEiwA7QEqyP2ZGSuRbUrCK9jKWmxUdqNp8w6Lb1Ou4EAPR1-2M2VRcaX6b0UU8hoCDWcQAvD_BwE\nWhy to organise your work in projects https://www.tidyverse.org/blog/2017/12/workflow-vs-script/\nDavid Zelený clean and tidy script https://davidzeleny.net/wiki/doku.php/recol:clean_and_tidy_script\nTidyverse suggestions to good coding style https://style.tidyverse.org/\nR for data science book https://r4ds.hadley.nz/",
    "crumbs": [
      "Data Manipulation and Visualization",
      "1 Introduction"
    ]
  },
  {
    "objectID": "AIinTeaching/ai_in_teaching.html",
    "href": "AIinTeaching/ai_in_teaching.html",
    "title": "AI in Data Analysis",
    "section": "",
    "text": "How to use AI in data analysis?",
    "crumbs": [
      "AI in Data Analysis"
    ]
  },
  {
    "objectID": "CommunityEcology/community_ecology.html",
    "href": "CommunityEcology/community_ecology.html",
    "title": "Data Analysis in Community Ecology",
    "section": "",
    "text": "Cookbook might be moved here",
    "crumbs": [
      "Community Ecology"
    ]
  },
  {
    "objectID": "DataManipulationVisualisation/11_github.html",
    "href": "DataManipulationVisualisation/11_github.html",
    "title": "11 GitHub",
    "section": "",
    "text": "version control and GitHub\neasy: how to find, download code from someone without an account (examples - maps course, published codes for articles)\nbut much more is possible when you create your own account:\ninstall git\ncreate your own GitHub account\nsetup connection with RStudio\ncreate your first repository (e.g. for your scripts from this course)\nsettings - private repositories, colaborators\ncode, readme, issues etc.\ncommit, push, pull\nbranches, pull request\nmerge conflicts\npublication in a long-term repository - connection with Zenodo\nGitHub pages - our study materials, personal webpages (add examples)",
    "crumbs": [
      "Data Manipulation and Visualization",
      "11 GitHub"
    ]
  },
  {
    "objectID": "DataManipulationVisualisation/11_github.html#further-reading",
    "href": "DataManipulationVisualisation/11_github.html#further-reading",
    "title": "11 GitHub",
    "section": "Further reading",
    "text": "Further reading\nHappy Git and GitHub for the useR: https://happygitwithr.com",
    "crumbs": [
      "Data Manipulation and Visualization",
      "11 GitHub"
    ]
  },
  {
    "objectID": "DataManipulationVisualisation/6_advanced_visualisation.html",
    "href": "DataManipulationVisualisation/6_advanced_visualisation.html",
    "title": "6 Advanced Visualisation",
    "section": "",
    "text": "You already know how to make basic plots using ggplot functions. We’ll now\nggplot advanced\ndata argument - highlight subset of points\nplaying with colors, shapes, text, ggrepel, alpha, sizes, different geoms - violin, jitter, path, segment\nmultiple layers in one plot\nposition in barplot\naesthetic specifications vignette: https://ggplot2.tidyverse.org/articles/ggplot2-specs.html\nfaceting\nmultiple plots together - patchwork\nlegend position etc\naxis transformation, limits, spaces\nggpubr\nggeffects\nshiny trailer",
    "crumbs": [
      "Data Manipulation and Visualization",
      "6 Advanced data visualisation"
    ]
  },
  {
    "objectID": "DataManipulationVisualisation/6_advanced_visualisation.html#exercises",
    "href": "DataManipulationVisualisation/6_advanced_visualisation.html#exercises",
    "title": "6 Advanced Visualisation",
    "section": "Exercises",
    "text": "Exercises\n\nrecreate a plot",
    "crumbs": [
      "Data Manipulation and Visualization",
      "6 Advanced data visualisation"
    ]
  },
  {
    "objectID": "DataManipulationVisualisation/6_advanced_visualisation.html#further-reading",
    "href": "DataManipulationVisualisation/6_advanced_visualisation.html#further-reading",
    "title": "6 Advanced Visualisation",
    "section": "Further reading",
    "text": "Further reading\nggplot2 vignette: https://ggplot2.tidyverse.org\nR 4 Data Science: https://r4ds.hadley.nz/visualize.html\nCheatsheet: https://rstudio.github.io/cheatsheets/html/data-visualization.html\nggplot2: Elegant Graphics for Data Analysis (3e): https://ggplot2-book.org\nR Graphics Cookbook: https://r-graphics.org\nggplot Extensions: https://exts.ggplot2.tidyverse.org/gallery\nMastering Shiny: https://mastering-shiny.org\nTutorial for effective visual science communication: https://ascpt.onlinelibrary.wiley.com/doi/full/10.1002/psp4.12455\nGraphics principles cheatsheet: https://github.com/GraphicsPrinciples/CheatSheet/blob/master/NVSCheatSheet.pdf",
    "crumbs": [
      "Data Manipulation and Visualization",
      "6 Advanced data visualisation"
    ]
  },
  {
    "objectID": "DataManipulationVisualisation/data_manipulation_visualisation.html",
    "href": "DataManipulationVisualisation/data_manipulation_visualisation.html",
    "title": "Data Manipulation and Visualisation",
    "section": "",
    "text": "Introduction\nV průběhu kurzu představíme pokročilé metody manipulace a vizualizace dat v programu R, zejména s využitím knihoven z kolekce tidyverse (tidyr, dplyr, tibble, purr, stringr, ggplot2, readr). Cílem předmětu je naučit studenty rutinní manipulaci s daty, tak aby si je uměli importovat, upravit, filtrovat, připojit nové informace z externích dat, vytvořit nové proměnné (např. na základě výpočtu), seskupit vzorky na základě nějaké charakteristiky/informace a pro tyto skupiny vypočítat další parametry. Dále se studenti naučí základní i pokročilé metody vizualizace dat pomocí ggplot2 a tvorbu základních map v R. Cílem předmětu je i osvojení přístupu open data science, kdy se naučí připravit skript tak, aby bylo možné ho na závěr publikovat na platformě GitHub.\n\n\n1 Úvod\n\nR jako programovací jazyk\nTidyverse package, %&gt;%, |&gt;\nprojekty v RStudiu, cheatsheets, keyboard shortcuts\n\nzásady tidy skriptu (úprava, nadpisy, záložky, poznámky)\nzdroje informací a kde hledat pomoc, AI\nimport pomocí readr, readxl, na co si dávat pozor (encoding)\nstruktura dat (names, table, glimpse)\ntidy data (zásady, příprava, kontrola), přejmenování proměnných (rename)\n\n\n\n2 Základní manipulace s daty\n\nzákladní manipulace s daty (select, filter, mutate, arrange, slice)\nexport dat (write_csv)\n\n\n\n3 Vizualizace dat pomocí ggplot\n\nlogika ggplot\nzákladní geom funkce (point, line, boxplot, histogram, barplot)\nprokládání trendů\nsymboly, barvy\nlegenda, popisky os\ntheme\nuložení grafu (ggsave)\n\n\n\n4 Wide vs. long format\n\npřevody formátů (pivot)\nnové proměnné (mutate, group_by, summarise)\nspecies richness, součty/podíly různých hodnot v rámci vzorku (count)\n\n\n\n5 Join funkce\n\nspojovací funkce (left_join, full_join), přidání informací z jiných datových souborů\nfiltrovací funkce: semi_join, anti_join\npodíly určitých skupin podle vlastností, indikační hodnoty, CWM\núprava nomenklatury (pokročilé mutate, summarise), slučování duplicit\nmutate s vícenásobnou podmínkou (ifelse, case_when)\n\n\n\n6 Pokročilá vizualizace dat\n\nggplot advanced - faceting, patchwork, ggpubr, ggeffects\nshiny trailer (ukázka)\n\n\n\n7 Automatizace skriptu\n\npoužití smyček (for loops)\nnapsání vlastní funkce\nukázka práce s nested dataframes (purrr)\n\n\n\n8 Mapy v R\n\nmapy pomocí terra\nzobrazení vzorků v prostoru (přehledová mapa, měřítko, legenda…) na podkladě open street maps\nkartogramy, mapování v gridu\n\n\n\n9 Pokročilé mapy v R\n\nextrakce dat z rastru, digitální model\nvýběr dat pomocí masky\nškálování mapovaných bodů podle hodnot (barva, symbol)\n\n\n\n10 Od databáze ke grafu (opakovací hodina)\n\nimport dat z databáze, propojení různých datových souborů, úprava struktury dat\nfiltrování podsouboru\nsloučení duplicit např. vzniklých převodem nomenklatury\nnapojení externích vlastností, výpočty vážených průměrů\npříprava grafu pro publikaci\nsloučení celého procesu do jedné pipeliny\n\n\n\n11 GitHub\n\njak funguje, stažení dat z veřejných projektů\nvlastní účet\nvytvoření vlastního úložiště (repository), propojení s R projektem v počítači\nspolupráce na projektu (branch, commit, push, pull)\npublikace skriptu, zveřejnění (doi, zásady readme)\n\n\n\nExample\n\nlibrary(ggplot2)\n\nggplot(mtcars, aes(x = wt, y = mpg)) +\n  geom_point() +\n  theme_minimal()",
    "crumbs": [
      "Data Manipulation and Visualization"
    ]
  }
]