[
  {
    "objectID": "DataManipulationVisualisation/7_automatisation.html",
    "href": "DataManipulationVisualisation/7_automatisation.html",
    "title": "7 Automatisation",
    "section": "",
    "text": "“Copy-and-paste is a powerful tool, but you should avoid doing it more than twice.” – Hadley Wickham, R for Data Science\nIt’s not only a matter of the script length. Repeating the same code multiple times might easily lead to errors and inconsistencies, and it is therefore better to avoid it. There are multiple ways to reduce copy-pasting when we want to repeat a similar operation multiple times. In this chapter, you will learn how to write your own function and some tools for iteration, including for loops and functions from the purrr package.\nThroughout this chapter, we will use the following packages:\nlibrary(palmerpenguins)\nlibrary(broom)\nlibrary(tidyverse)",
    "crumbs": [
      "Data Manipulation and Visualization",
      "7 Automatisation"
    ]
  },
  {
    "objectID": "DataManipulationVisualisation/7_automatisation.html#functions",
    "href": "DataManipulationVisualisation/7_automatisation.html#functions",
    "title": "7 Automatisation",
    "section": "7.1 Functions",
    "text": "7.1 Functions\nIn more complex data analysis tasks, when you need to repeat a similar operation multiple times, e.g. calculate the same model for multiple subsets of data, calculate models with the same explanatory variables for different response variables, or draw similarly looking plots for multiple variables, it becomes really useful to be able to write your own function and hide the repeated code into it. A huge advantage of only writing the code once and saving it as a function is that when you have to change something, you only do it once and thus prevent mistakes like replacing the variable name in one place but not in the other, etc. In the long term, it also saves time and improves the understandability of the code, as the script does not end up being hundreds or thousands of lines long and all important commands are in one place.\nWe will use a penguin dataset that you know already:\n\nglimpse(penguins)\n\nRows: 344\nColumns: 8\n$ species           &lt;fct&gt; Adelie, Adelie, Adelie, Adelie, Adelie, Adelie, Adel…\n$ island            &lt;fct&gt; Torgersen, Torgersen, Torgersen, Torgersen, Torgerse…\n$ bill_length_mm    &lt;dbl&gt; 39.1, 39.5, 40.3, NA, 36.7, 39.3, 38.9, 39.2, 34.1, …\n$ bill_depth_mm     &lt;dbl&gt; 18.7, 17.4, 18.0, NA, 19.3, 20.6, 17.8, 19.6, 18.1, …\n$ flipper_length_mm &lt;int&gt; 181, 186, 195, NA, 193, 190, 181, 195, 193, 190, 186…\n$ body_mass_g       &lt;int&gt; 3750, 3800, 3250, NA, 3450, 3650, 3625, 4675, 3475, …\n$ sex               &lt;fct&gt; male, female, female, NA, female, male, female, male…\n$ year              &lt;int&gt; 2007, 2007, 2007, 2007, 2007, 2007, 2007, 2007, 2007…\n\n\n\n7.1.1 Vector functions\nLet’s say we want to standardise each measured variable in the dataset, and just imagine for now that there is no scale() function, so we have to do it manually. We would end up with something like this:\n\npenguins |&gt; \n  mutate(bill_length_mm = (bill_length_mm - mean(bill_length_mm, na.rm = T))/sd(bill_length_mm, na.rm = T), \n         bill_depth_mm = (bill_depth_mm - mean(bill_depth_mm, na.rm = T))/sd(bill_depth_mm, na.rm = T),\n         flipper_length_mm = (flipper_length_mm - mean(flipper_length_mm, na.rm = T))/sd(flipper_length_mm, na.rm = T),\n         body_mass_g = (body_mass_g - mean(body_mass_g, na.rm = T))/sd(body_mass_g, na.rm = T))\n\n# A tibble: 344 × 8\n   species island    bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n   &lt;fct&gt;   &lt;fct&gt;              &lt;dbl&gt;         &lt;dbl&gt;             &lt;dbl&gt;       &lt;dbl&gt;\n 1 Adelie  Torgersen         -0.883         0.784            -1.42      -0.563 \n 2 Adelie  Torgersen         -0.810         0.126            -1.06      -0.501 \n 3 Adelie  Torgersen         -0.663         0.430            -0.421     -1.19  \n 4 Adelie  Torgersen         NA            NA                NA         NA     \n 5 Adelie  Torgersen         -1.32          1.09             -0.563     -0.937 \n 6 Adelie  Torgersen         -0.847         1.75             -0.776     -0.688 \n 7 Adelie  Torgersen         -0.920         0.329            -1.42      -0.719 \n 8 Adelie  Torgersen         -0.865         1.24             -0.421      0.590 \n 9 Adelie  Torgersen         -1.80          0.480            -0.563     -0.906 \n10 Adelie  Torgersen         -0.352         1.54             -0.776      0.0602\n# ℹ 334 more rows\n# ℹ 2 more variables: sex &lt;fct&gt;, year &lt;int&gt;\n\n\nWhen creating such a code, it is quite easy to forget to replace the variable name in one place when copying it. To avoid that and make the code easier to read, we can transform the code into a function. We need three things to do that:\n\na function name, this should be concise and informative (please avoid myfunction1(), etc.) and not mess up already existing functions, we will use custom_scale to distinguish our function from the scale().\narguments, which are the things that we want to vary across calls, in our case, we have just one numerical variable we are working with, so we will call it x.\nbody, that is the code that stays the same across calls.\n\nEvery function defined in R has the following structure:\n\nname &lt;- function(arguments){\n  body\n}\n\nIn our case, the function would look like this:\n\ncustom_scale &lt;- function(x){\n  (x - mean(x, na.rm = T))/sd(x, na.rm = T)\n}\n\nWhen we run this code, our new function is saved into the environment, and we can use it as any other function. We created a function that takes a vector and returns a vector of the same length that might be use within the mutate() function.\n\npenguins |&gt; \n  mutate(bill_length_mm = custom_scale(bill_length_mm), \n         bill_depth_mm = custom_scale(bill_depth_mm),\n         flipper_length_mm = custom_scale(flipper_length_mm),\n         body_mass_g = custom_scale(body_mass_g))\n\n# A tibble: 344 × 8\n   species island    bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n   &lt;fct&gt;   &lt;fct&gt;              &lt;dbl&gt;         &lt;dbl&gt;             &lt;dbl&gt;       &lt;dbl&gt;\n 1 Adelie  Torgersen         -0.883         0.784            -1.42      -0.563 \n 2 Adelie  Torgersen         -0.810         0.126            -1.06      -0.501 \n 3 Adelie  Torgersen         -0.663         0.430            -0.421     -1.19  \n 4 Adelie  Torgersen         NA            NA                NA         NA     \n 5 Adelie  Torgersen         -1.32          1.09             -0.563     -0.937 \n 6 Adelie  Torgersen         -0.847         1.75             -0.776     -0.688 \n 7 Adelie  Torgersen         -0.920         0.329            -1.42      -0.719 \n 8 Adelie  Torgersen         -0.865         1.24             -0.421      0.590 \n 9 Adelie  Torgersen         -1.80          0.480            -0.563     -0.906 \n10 Adelie  Torgersen         -0.352         1.54             -0.776      0.0602\n# ℹ 334 more rows\n# ℹ 2 more variables: sex &lt;fct&gt;, year &lt;int&gt;\n\n\nWe can, of course, reduce the duplication even further by using the across() function:\n\npenguins |&gt; \n  mutate(across(c(bill_length_mm, bill_depth_mm, flipper_length_mm, body_mass_g), ~custom_scale(.x)))\n\n# A tibble: 344 × 8\n   species island    bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n   &lt;fct&gt;   &lt;fct&gt;              &lt;dbl&gt;         &lt;dbl&gt;             &lt;dbl&gt;       &lt;dbl&gt;\n 1 Adelie  Torgersen         -0.883         0.784            -1.42      -0.563 \n 2 Adelie  Torgersen         -0.810         0.126            -1.06      -0.501 \n 3 Adelie  Torgersen         -0.663         0.430            -0.421     -1.19  \n 4 Adelie  Torgersen         NA            NA                NA         NA     \n 5 Adelie  Torgersen         -1.32          1.09             -0.563     -0.937 \n 6 Adelie  Torgersen         -0.847         1.75             -0.776     -0.688 \n 7 Adelie  Torgersen         -0.920         0.329            -1.42      -0.719 \n 8 Adelie  Torgersen         -0.865         1.24             -0.421      0.590 \n 9 Adelie  Torgersen         -1.80          0.480            -0.563     -0.906 \n10 Adelie  Torgersen         -0.352         1.54             -0.776      0.0602\n# ℹ 334 more rows\n# ℹ 2 more variables: sex &lt;fct&gt;, year &lt;int&gt;\n\n\nThere are some useful RStudio keyboard shortcuts you can use to work with functions:\n\nTo find a definition of any function, place a cursor on the name of the function in the script and press F2.\nTo extract a function from a code you have written, use Alt + Ctrl + X. Just be sure you always check the results, because sometimes it will not do exactly what you expect, so you will have to make some adjustments.\n\nWe can also write summary functions to be used in a summarise() call. For example, we could calculate the difference between the minimum and maximum values of the given variable:\n\nrange_diff &lt;- function(x){\n  max(x, na.rm = T) - min(x, na.rm = T)\n}\n\npenguins |&gt; \n  summarize(bill_length_mm = range_diff(bill_length_mm), \n            bill_depth_mm = range_diff(bill_depth_mm))\n\n# A tibble: 1 × 2\n  bill_length_mm bill_depth_mm\n           &lt;dbl&gt;         &lt;dbl&gt;\n1           27.5           8.4\n\n\n\n\n7.1.2 Data frame functions\nTill now, we have written several vector functions that might be used within dplyr functions. But functions may operate even at the data frame level. We will show here a real-world example of data sampled in three types of sand vegetation - pioneer sand vegetation (Corynephorion), acidophilous sand grasslands (Armerion) and basiphilous sand grasslands (Festucion valesiacae). The species data of all three vegetation types are saved in a long format in one file, and the header data with cluster assignment in a second file.\n\nspe_long &lt;- read_csv('data/sands/sands_spe_long.csv')\n\nRows: 3154 Columns: 3\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (1): valid_name\ndbl (2): releve_nr, cover_perc\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\nglimpse(spe_long)\n\nRows: 3,154\nColumns: 3\n$ releve_nr  &lt;dbl&gt; 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2,…\n$ valid_name &lt;chr&gt; \"Achillea millefolium agg.\", \"Artemisia campestris\", \"Carex…\n$ cover_perc &lt;dbl&gt; 0.5, 0.5, 0.5, 3.0, 0.5, 15.0, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5…\n\nhead &lt;- read_csv('data/sands/sands_head.csv')\n\nRows: 172 Columns: 89\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (40): country, reference, nr_in_tab, coverscale, author, syntaxon, moss_...\ndbl (46): releve_nr, table_nr, date, surf_area, altitude, exposition, inclin...\nlgl  (3): rs_project, maniptyp, name_ass\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\nglimpse(head)\n\nRows: 172\nColumns: 89\n$ releve_nr           &lt;dbl&gt; 1, 2, 3, 4, 6, 7, 8, 9, 10, 11, 12, 14, 15, 16, 17…\n$ country             &lt;chr&gt; \"CZ\", \"CZ\", \"CZ\", \"CZ\", \"CZ\", \"CZ\", \"CZ\", \"CZ\", \"C…\n$ reference           &lt;chr&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA…\n$ table_nr            &lt;dbl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA…\n$ nr_in_tab           &lt;chr&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA…\n$ coverscale          &lt;chr&gt; \"02\", \"02\", \"02\", \"02\", \"02\", \"02\", \"02\", \"02\", \"0…\n$ author              &lt;chr&gt; \"1120\", \"1120\", \"1120\", \"1120\", \"1120\", \"1120\", \"1…\n$ date                &lt;dbl&gt; 20230501, 20230501, 20230501, 20230501, 20230507, …\n$ syntaxon            &lt;chr&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA…\n$ surf_area           &lt;dbl&gt; 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16…\n$ altitude            &lt;dbl&gt; 188, 191, 196, 197, 181, 191, 193, 201, 187, 190, …\n$ exposition          &lt;dbl&gt; NA, NA, NA, NA, 225, 360, 180, 225, NA, 270, NA, N…\n$ inclinatio          &lt;dbl&gt; NA, NA, NA, NA, 2, 2, 2, 40, NA, 2, 0, 0, 5, 3, 2,…\n$ cov_total           &lt;dbl&gt; 50, 80, 70, 70, 80, 80, 85, 70, 60, 80, 60, 80, 80…\n$ cov_trees           &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,…\n$ cov_shrubs          &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,…\n$ cov_herbs           &lt;dbl&gt; 20, 40, 20, 20, 70, 70, 70, 50, 35, 60, 40, 75, 50…\n$ cov_mosses          &lt;dbl&gt; 30, 70, 50, 50, 70, 70, 45, 30, 50, 50, 30, 30, 50…\n$ cov_lichen          &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,…\n$ cov_algae           &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,…\n$ cov_litter          &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,…\n$ cov_water           &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,…\n$ cov_rock            &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,…\n$ tree_high           &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,…\n$ tree_low            &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,…\n$ shrub_high          &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,…\n$ shrub_low           &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,…\n$ herb_high           &lt;dbl&gt; 5, 10, 5, 5, 15, 20, 25, 25, 15, 20, 10, 15, 25, 3…\n$ herb_low            &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,…\n$ herb_max            &lt;dbl&gt; 10, 30, 20, 20, 30, 35, 70, 90, 50, 60, 60, 60, 70…\n$ crypt_high          &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,…\n$ moss_ident          &lt;chr&gt; \"Y\", \"Y\", \"Y\", \"Y\", \"Y\", \"Y\", \"Y\", \"Y\", \"Y\", \"Y\", …\n$ lich_ident          &lt;chr&gt; \"Y\", \"Y\", \"Y\", \"Y\", \"Y\", \"Y\", \"Y\", \"Y\", \"Y\", \"Y\", …\n$ remarks             &lt;chr&gt; NA, NA, \"Cetraria species = Cetraria muricata\", NA…\n$ coord_code          &lt;chr&gt; \"01\", \"01\", \"01\", \"01\", \"01\", \"01\", \"01\", \"01\", \"0…\n$ rs_project          &lt;lgl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA…\n$ resurvey            &lt;chr&gt; \"Y\", \"Y\", \"Y\", \"Y\", \"Y\", \"Y\", \"Y\", \"Y\", \"Y\", \"Y\", …\n$ rs_site             &lt;dbl&gt; 1, 1, 1, 1, 2, 3, 4, 5, 6, 6, 6, 6, 7, 7, 7, 7, 7,…\n$ rs_plot             &lt;dbl&gt; 1, 2, 3, 77, 4, 5, 6, 7, 8, 9, 78, 79, 10, 11, 12,…\n$ rs_observ           &lt;chr&gt; \"1_1_2\", \"1_2_2\", \"1_3_2\", \"1_77_2\", \"2_4_2\", \"3_5…\n$ plot_shape          &lt;chr&gt; \"square\", \"square\", \"square\", \"square\", \"square\", …\n$ manipulate          &lt;chr&gt; \"N\", \"N\", \"N\", \"N\", \"N\", \"N\", \"N\", \"N\", \"N\", \"N\", …\n$ maniptyp            &lt;lgl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA…\n$ loc_method          &lt;dbl&gt; 4, 4, 4, 4, 4, 4, 4, 4, NA, NA, NA, NA, 4, 4, 4, 4…\n$ data_owner          &lt;chr&gt; \"Klára Klinkovská, Masaryk University\", \"Klára Kli…\n$ eva_access          &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,…\n$ longitude           &lt;dbl&gt; 17.29211, 17.29086, 17.29110, 17.29024, 17.15501, …\n$ latitude            &lt;dbl&gt; 48.95597, 48.95687, 48.95826, 48.95889, 48.96134, …\n$ precision           &lt;dbl&gt; 3, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,…\n$ locality            &lt;chr&gt; \"Bzenec (okr. Hodonín), PP Vojenské cvifi?tI, 2,5 …\n$ field_nr            &lt;chr&gt; \"PKK01\", \"PKK02\", \"PKK03\", \"PKK04\", \"PKK06\", \"PKK0…\n$ habitat             &lt;chr&gt; \"pionýrská vegetace na písku, d2íve cesta\", \"suchý…\n$ geology             &lt;chr&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA…\n$ soil                &lt;chr&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA…\n$ s_ph_h2o            &lt;dbl&gt; 5.34, 5.06, 4.82, 4.90, 5.38, 6.22, 6.33, 5.53, 4.…\n$ esy_code            &lt;chr&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA…\n$ esy_name            &lt;chr&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA…\n$ plot_observation_id &lt;dbl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA…\n$ plot_id             &lt;dbl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA…\n$ nr_table_in_publ    &lt;chr&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA…\n$ cover_scale_name    &lt;chr&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA…\n$ name_association    &lt;chr&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA…\n$ name_alliance       &lt;chr&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA…\n$ expert_system       &lt;chr&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA…\n$ dataset             &lt;chr&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA…\n$ surveyor            &lt;chr&gt; \"Klara Klinkovska\", \"Klara Klinkovska\", \"Klara Kli…\n$ old_releve_nr       &lt;dbl&gt; 115576, 115577, 115574, 115573, 115670, 115627, 11…\n$ loc_match           &lt;chr&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA…\n$ gps_match           &lt;chr&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA…\n$ new_site            &lt;chr&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA…\n$ cov_ground          &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,…\n$ conserv             &lt;chr&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA…\n$ management          &lt;chr&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA…\n$ subplot             &lt;chr&gt; \"N\", \"N\", \"N\", \"N\", \"N\", \"N\", \"N\", \"N\", \"N\", \"N\", …\n$ longitude2          &lt;dbl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA…\n$ latitude2           &lt;dbl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA…\n$ longitude3          &lt;dbl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA…\n$ latitude3           &lt;dbl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA…\n$ longitude4          &lt;dbl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA…\n$ latitude4           &lt;dbl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA…\n$ year                &lt;dbl&gt; 2023, 2023, 2023, 2023, 2023, 2023, 2023, 2023, 20…\n$ time                &lt;chr&gt; \"new\", \"new\", \"new\", \"new\", \"new\", \"new\", \"new\", \"…\n$ orig                &lt;chr&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA…\n$ import_nr           &lt;dbl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA…\n$ name_all            &lt;chr&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA…\n$ name_ass            &lt;lgl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA…\n$ plot_type           &lt;chr&gt; \"resampling\", \"resampling\", \"resampling\", \"resampl…\n$ cluster             &lt;chr&gt; \"Corynephorion\", \"Armerion\", \"Corynephorion\", \"Cor…\n$ year0               &lt;dbl&gt; 19, 18, 18, 20, 17, 18, 17, 19, 18, 20, 18, 20, 18…\n\n\nImagine we now want to run an ordination analysis that needs species data in a wide format for each of the three vegetation types separately. We need to subset the species data to only the selected vegetation type, select only relevant columns, square-root the species abundances, and transform the data into a wide format. We can incorporate all these steps into a single function, that we will then run three times for different subsets:\n\nsubset_to_wide &lt;- function(data_long, veg_type){\n  data_long |&gt; \n    semi_join(head |&gt; filter(cluster == veg_type)) |&gt;\n    select(releve_nr, valid_name, cover_perc) |&gt; \n    mutate(cover_perc = sqrt(cover_perc)) |&gt; \n    pivot_wider(names_from = valid_name, values_from = cover_perc, values_fill = 0) |&gt; \n    select(-releve_nr)\n}\n\nspe_wide_cory &lt;- subset_to_wide(spe_long, 'Corynephorion')\n\nJoining with `by = join_by(releve_nr)`\n\nspe_wide_arm &lt;- subset_to_wide(spe_long, 'Armerion')\n\nJoining with `by = join_by(releve_nr)`\n\nspe_wide_fes &lt;- subset_to_wide(spe_long, 'Festucion valesiacae')\n\nJoining with `by = join_by(releve_nr)`\n\n\nWriting your own functions with the dplyr and tidyr calls inside sometimes also brings some challenges. We unfortunately do not have enough space here to deal with them, but there are great sources with detailed explanation, where you can learn more or find help if needed, e.g. https://r4ds.hadley.nz/functions.html#data-frame-functions, programming with dplyr, programming with tidyr, What is data-masking and why do I need {{?.\n\n\n7.1.3 Plot functions\nSometimes it is also useful to reduce the amount of replicated code when plotting many different things in a similar way. The plot functions work similarly to the data frame functions, just return a plot instead of a data frame. For example, we might want to visualise the relationship between bill length and bill depth of three different penguin species separately. We have to first filter our penguin dataset to contain data on only one species, and then create a scatterplot using a ggplot sequence. This is how we would write the code for plotting the data for one species:\n\npenguins |&gt; \n    filter(species == 'Adelie') |&gt; \n    ggplot(aes(bill_length_mm, bill_depth_mm)) +\n    geom_point() +\n    theme_bw() +\n    labs(title = 'Adelie', x = 'Bill length [mm]', y = 'Bill depth [mm]')\n\nWarning: Removed 1 row containing missing values or values outside the scale range\n(`geom_point()`).\n\n\n\n\n\n\n\n\n\nLet’s now turn this code into a function instead of copy-pasting it two more times to plot the same relationship for the two other species:\n\nplot_species &lt;- function(data, species_name){\n  data |&gt; \n    filter(species == species_name) |&gt; \n    ggplot(aes(bill_length_mm, bill_depth_mm)) +\n    geom_point() +\n    theme_bw() +\n    labs(title = species_name, x = 'Bill length [mm]', y = 'Bill depth [mm]')\n}\nplot_species(penguins, 'Adelie')\n\nWarning: Removed 1 row containing missing values or values outside the scale range\n(`geom_point()`).\n\n\n\n\n\n\n\n\n\nTo learn more about reducing duplication in your ggplot2 code look here: https://r4ds.hadley.nz/functions.html#plot-functions, Programming with ggplot2, https://ggplot2.tidyverse.org/articles/ggplot2-in-packages.html.",
    "crumbs": [
      "Data Manipulation and Visualization",
      "7 Automatisation"
    ]
  },
  {
    "objectID": "DataManipulationVisualisation/7_automatisation.html#for-loops",
    "href": "DataManipulationVisualisation/7_automatisation.html#for-loops",
    "title": "7 Automatisation",
    "section": "7.2 For loops",
    "text": "7.2 For loops\nWe will now move to the iteration part of this chapter, which means repeating the same action multiple times on different objects. In any programming language, it is possible to automate such repetitions using a for loop. The basic structure of a for loop looks like this:\n\nfor (variable in sequence) {\n  # do something with the variable\n}\n\nThe for loop takes one variable from a given sequence, runs the code inside {} for this variable and then moves to the next variable in the sequence. A basic example might be printing numbers from a sequence:\n\nfor (i in 1:5) {\n  print(i)\n}\n\n[1] 1\n[1] 2\n[1] 3\n[1] 4\n[1] 5\n\n\nThe for loop takes one number, prints it, then takes the next one, prints it, and so on till the end of the sequence.\nWe can, for example, take our plot function to plot the scatterplot of bill length and bill depth of individual species and loop over the species names to sequentially make a plot for all species.\n\nfor (species_name in unique(penguins$species)) {\n  plot_species(penguins, species_name) |&gt; \n    print()\n}\n\nWarning: Removed 1 row containing missing values or values outside the scale range\n(`geom_point()`).\n\n\n\n\n\n\n\n\n\nWarning: Removed 1 row containing missing values or values outside the scale range\n(`geom_point()`).\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThere are always multiple ways to get to the same result, and this is also true for iteration in R. The purrr package has powerful tools to iterate over multiple elements. But even when you choose to prefer purrr solutions, it is worth being familiar with for loops and their functionality, because you might see them often in the code of other people, and they are universal across programming languages.",
    "crumbs": [
      "Data Manipulation and Visualization",
      "7 Automatisation"
    ]
  },
  {
    "objectID": "DataManipulationVisualisation/7_automatisation.html#purrr-and-working-with-nested-dataframes",
    "href": "DataManipulationVisualisation/7_automatisation.html#purrr-and-working-with-nested-dataframes",
    "title": "7 Automatisation",
    "section": "7.3 purrr and working with nested dataframes",
    "text": "7.3 purrr and working with nested dataframes\nWe already went through most of the tidyverse packages, but we didn’t talk about the purrr package yet. purrr provides powerful tools for automatisation of tasks that need to be repeated multiple times, e.g. for each file in a directory, each element of a list, each dataframe… They allow you to replace for loops with map() functions, which might be more powerful, readable and consistent with the rest of tidyverse.\nLet’s start with the task of reading multiple files at once. Imagine you have multiple files that are of the same structure, but for some reason, they are stored in multiple files. As example data, we will use the gapminder dataset, which provides values for life expectancy, GDP per capita, and population size. The data we have in the gapminder folder is divided by year, and we now want to load them all and combine them into a single tibble. We could do that by copy-pasting the read_csv() function twelve times, but there is a more elegant way. Let’s list the files first:\n\npaths &lt;- list.files('data/gapminder/', pattern = '.csv', full.names = T)\npaths\n\n [1] \"data/gapminder/gapminder_1952.csv\" \"data/gapminder/gapminder_1957.csv\"\n [3] \"data/gapminder/gapminder_1962.csv\" \"data/gapminder/gapminder_1967.csv\"\n [5] \"data/gapminder/gapminder_1972.csv\" \"data/gapminder/gapminder_1977.csv\"\n [7] \"data/gapminder/gapminder_1982.csv\" \"data/gapminder/gapminder_1987.csv\"\n [9] \"data/gapminder/gapminder_1992.csv\" \"data/gapminder/gapminder_1997.csv\"\n[11] \"data/gapminder/gapminder_2002.csv\" \"data/gapminder/gapminder_2007.csv\"\n\n\nThe map() function works similarly to across(), but instead of doing something to each column in a data frame, it does something to each element of a vector. It is an analogy of a for loop, the function takes each element of a sequence and applies a function to it. We can use it now to read all 12 csv files in one line:\n\nfiles &lt;- map(paths, ~read_csv(.x))\n\nRows: 142 Columns: 5\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (2): country, continent\ndbl (3): lifeExp, pop, gdpPercap\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\nRows: 142 Columns: 5\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (2): country, continent\ndbl (3): lifeExp, pop, gdpPercap\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\nRows: 142 Columns: 5\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (2): country, continent\ndbl (3): lifeExp, pop, gdpPercap\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\nRows: 142 Columns: 5\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (2): country, continent\ndbl (3): lifeExp, pop, gdpPercap\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\nRows: 142 Columns: 5\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (2): country, continent\ndbl (3): lifeExp, pop, gdpPercap\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\nRows: 142 Columns: 5\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (2): country, continent\ndbl (3): lifeExp, pop, gdpPercap\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\nRows: 142 Columns: 5\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (2): country, continent\ndbl (3): lifeExp, pop, gdpPercap\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\nRows: 142 Columns: 5\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (2): country, continent\ndbl (3): lifeExp, pop, gdpPercap\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\nRows: 142 Columns: 5\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (2): country, continent\ndbl (3): lifeExp, pop, gdpPercap\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\nRows: 142 Columns: 5\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (2): country, continent\ndbl (3): lifeExp, pop, gdpPercap\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\nRows: 142 Columns: 5\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (2): country, continent\ndbl (3): lifeExp, pop, gdpPercap\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\nRows: 142 Columns: 5\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (2): country, continent\ndbl (3): lifeExp, pop, gdpPercap\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\nstr(files)\n\nList of 12\n $ : spc_tbl_ [142 × 5] (S3: spec_tbl_df/tbl_df/tbl/data.frame)\n  ..$ country  : chr [1:142] \"Afghanistan\" \"Albania\" \"Algeria\" \"Angola\" ...\n  ..$ continent: chr [1:142] \"Asia\" \"Europe\" \"Africa\" \"Africa\" ...\n  ..$ lifeExp  : num [1:142] 28.8 55.2 43.1 30 62.5 ...\n  ..$ pop      : num [1:142] 8425333 1282697 9279525 4232095 17876956 ...\n  ..$ gdpPercap: num [1:142] 779 1601 2449 3521 5911 ...\n  ..- attr(*, \"spec\")=\n  .. .. cols(\n  .. ..   country = col_character(),\n  .. ..   continent = col_character(),\n  .. ..   lifeExp = col_double(),\n  .. ..   pop = col_double(),\n  .. ..   gdpPercap = col_double()\n  .. .. )\n  ..- attr(*, \"problems\")=&lt;externalptr&gt; \n $ : spc_tbl_ [142 × 5] (S3: spec_tbl_df/tbl_df/tbl/data.frame)\n  ..$ country  : chr [1:142] \"Afghanistan\" \"Albania\" \"Algeria\" \"Angola\" ...\n  ..$ continent: chr [1:142] \"Asia\" \"Europe\" \"Africa\" \"Africa\" ...\n  ..$ lifeExp  : num [1:142] 30.3 59.3 45.7 32 64.4 ...\n  ..$ pop      : num [1:142] 9240934 1476505 10270856 4561361 19610538 ...\n  ..$ gdpPercap: num [1:142] 821 1942 3014 3828 6857 ...\n  ..- attr(*, \"spec\")=\n  .. .. cols(\n  .. ..   country = col_character(),\n  .. ..   continent = col_character(),\n  .. ..   lifeExp = col_double(),\n  .. ..   pop = col_double(),\n  .. ..   gdpPercap = col_double()\n  .. .. )\n  ..- attr(*, \"problems\")=&lt;externalptr&gt; \n $ : spc_tbl_ [142 × 5] (S3: spec_tbl_df/tbl_df/tbl/data.frame)\n  ..$ country  : chr [1:142] \"Afghanistan\" \"Albania\" \"Algeria\" \"Angola\" ...\n  ..$ continent: chr [1:142] \"Asia\" \"Europe\" \"Africa\" \"Africa\" ...\n  ..$ lifeExp  : num [1:142] 32 64.8 48.3 34 65.1 ...\n  ..$ pop      : num [1:142] 10267083 1728137 11000948 4826015 21283783 ...\n  ..$ gdpPercap: num [1:142] 853 2313 2551 4269 7133 ...\n  ..- attr(*, \"spec\")=\n  .. .. cols(\n  .. ..   country = col_character(),\n  .. ..   continent = col_character(),\n  .. ..   lifeExp = col_double(),\n  .. ..   pop = col_double(),\n  .. ..   gdpPercap = col_double()\n  .. .. )\n  ..- attr(*, \"problems\")=&lt;externalptr&gt; \n $ : spc_tbl_ [142 × 5] (S3: spec_tbl_df/tbl_df/tbl/data.frame)\n  ..$ country  : chr [1:142] \"Afghanistan\" \"Albania\" \"Algeria\" \"Angola\" ...\n  ..$ continent: chr [1:142] \"Asia\" \"Europe\" \"Africa\" \"Africa\" ...\n  ..$ lifeExp  : num [1:142] 34 66.2 51.4 36 65.6 ...\n  ..$ pop      : num [1:142] 11537966 1984060 12760499 5247469 22934225 ...\n  ..$ gdpPercap: num [1:142] 836 2760 3247 5523 8053 ...\n  ..- attr(*, \"spec\")=\n  .. .. cols(\n  .. ..   country = col_character(),\n  .. ..   continent = col_character(),\n  .. ..   lifeExp = col_double(),\n  .. ..   pop = col_double(),\n  .. ..   gdpPercap = col_double()\n  .. .. )\n  ..- attr(*, \"problems\")=&lt;externalptr&gt; \n $ : spc_tbl_ [142 × 5] (S3: spec_tbl_df/tbl_df/tbl/data.frame)\n  ..$ country  : chr [1:142] \"Afghanistan\" \"Albania\" \"Algeria\" \"Angola\" ...\n  ..$ continent: chr [1:142] \"Asia\" \"Europe\" \"Africa\" \"Africa\" ...\n  ..$ lifeExp  : num [1:142] 36.1 67.7 54.5 37.9 67.1 ...\n  ..$ pop      : num [1:142] 13079460 2263554 14760787 5894858 24779799 ...\n  ..$ gdpPercap: num [1:142] 740 3313 4183 5473 9443 ...\n  ..- attr(*, \"spec\")=\n  .. .. cols(\n  .. ..   country = col_character(),\n  .. ..   continent = col_character(),\n  .. ..   lifeExp = col_double(),\n  .. ..   pop = col_double(),\n  .. ..   gdpPercap = col_double()\n  .. .. )\n  ..- attr(*, \"problems\")=&lt;externalptr&gt; \n $ : spc_tbl_ [142 × 5] (S3: spec_tbl_df/tbl_df/tbl/data.frame)\n  ..$ country  : chr [1:142] \"Afghanistan\" \"Albania\" \"Algeria\" \"Angola\" ...\n  ..$ continent: chr [1:142] \"Asia\" \"Europe\" \"Africa\" \"Africa\" ...\n  ..$ lifeExp  : num [1:142] 38.4 68.9 58 39.5 68.5 ...\n  ..$ pop      : num [1:142] 14880372 2509048 17152804 6162675 26983828 ...\n  ..$ gdpPercap: num [1:142] 786 3533 4910 3009 10079 ...\n  ..- attr(*, \"spec\")=\n  .. .. cols(\n  .. ..   country = col_character(),\n  .. ..   continent = col_character(),\n  .. ..   lifeExp = col_double(),\n  .. ..   pop = col_double(),\n  .. ..   gdpPercap = col_double()\n  .. .. )\n  ..- attr(*, \"problems\")=&lt;externalptr&gt; \n $ : spc_tbl_ [142 × 5] (S3: spec_tbl_df/tbl_df/tbl/data.frame)\n  ..$ country  : chr [1:142] \"Afghanistan\" \"Albania\" \"Algeria\" \"Angola\" ...\n  ..$ continent: chr [1:142] \"Asia\" \"Europe\" \"Africa\" \"Africa\" ...\n  ..$ lifeExp  : num [1:142] 39.9 70.4 61.4 39.9 69.9 ...\n  ..$ pop      : num [1:142] 12881816 2780097 20033753 7016384 29341374 ...\n  ..$ gdpPercap: num [1:142] 978 3631 5745 2757 8998 ...\n  ..- attr(*, \"spec\")=\n  .. .. cols(\n  .. ..   country = col_character(),\n  .. ..   continent = col_character(),\n  .. ..   lifeExp = col_double(),\n  .. ..   pop = col_double(),\n  .. ..   gdpPercap = col_double()\n  .. .. )\n  ..- attr(*, \"problems\")=&lt;externalptr&gt; \n $ : spc_tbl_ [142 × 5] (S3: spec_tbl_df/tbl_df/tbl/data.frame)\n  ..$ country  : chr [1:142] \"Afghanistan\" \"Albania\" \"Algeria\" \"Angola\" ...\n  ..$ continent: chr [1:142] \"Asia\" \"Europe\" \"Africa\" \"Africa\" ...\n  ..$ lifeExp  : num [1:142] 40.8 72 65.8 39.9 70.8 ...\n  ..$ pop      : num [1:142] 13867957 3075321 23254956 7874230 31620918 ...\n  ..$ gdpPercap: num [1:142] 852 3739 5681 2430 9140 ...\n  ..- attr(*, \"spec\")=\n  .. .. cols(\n  .. ..   country = col_character(),\n  .. ..   continent = col_character(),\n  .. ..   lifeExp = col_double(),\n  .. ..   pop = col_double(),\n  .. ..   gdpPercap = col_double()\n  .. .. )\n  ..- attr(*, \"problems\")=&lt;externalptr&gt; \n $ : spc_tbl_ [142 × 5] (S3: spec_tbl_df/tbl_df/tbl/data.frame)\n  ..$ country  : chr [1:142] \"Afghanistan\" \"Albania\" \"Algeria\" \"Angola\" ...\n  ..$ continent: chr [1:142] \"Asia\" \"Europe\" \"Africa\" \"Africa\" ...\n  ..$ lifeExp  : num [1:142] 41.7 71.6 67.7 40.6 71.9 ...\n  ..$ pop      : num [1:142] 16317921 3326498 26298373 8735988 33958947 ...\n  ..$ gdpPercap: num [1:142] 649 2497 5023 2628 9308 ...\n  ..- attr(*, \"spec\")=\n  .. .. cols(\n  .. ..   country = col_character(),\n  .. ..   continent = col_character(),\n  .. ..   lifeExp = col_double(),\n  .. ..   pop = col_double(),\n  .. ..   gdpPercap = col_double()\n  .. .. )\n  ..- attr(*, \"problems\")=&lt;externalptr&gt; \n $ : spc_tbl_ [142 × 5] (S3: spec_tbl_df/tbl_df/tbl/data.frame)\n  ..$ country  : chr [1:142] \"Afghanistan\" \"Albania\" \"Algeria\" \"Angola\" ...\n  ..$ continent: chr [1:142] \"Asia\" \"Europe\" \"Africa\" \"Africa\" ...\n  ..$ lifeExp  : num [1:142] 41.8 73 69.2 41 73.3 ...\n  ..$ pop      : num [1:142] 22227415 3428038 29072015 9875024 36203463 ...\n  ..$ gdpPercap: num [1:142] 635 3193 4797 2277 10967 ...\n  ..- attr(*, \"spec\")=\n  .. .. cols(\n  .. ..   country = col_character(),\n  .. ..   continent = col_character(),\n  .. ..   lifeExp = col_double(),\n  .. ..   pop = col_double(),\n  .. ..   gdpPercap = col_double()\n  .. .. )\n  ..- attr(*, \"problems\")=&lt;externalptr&gt; \n $ : spc_tbl_ [142 × 5] (S3: spec_tbl_df/tbl_df/tbl/data.frame)\n  ..$ country  : chr [1:142] \"Afghanistan\" \"Albania\" \"Algeria\" \"Angola\" ...\n  ..$ continent: chr [1:142] \"Asia\" \"Europe\" \"Africa\" \"Africa\" ...\n  ..$ lifeExp  : num [1:142] 42.1 75.7 71 41 74.3 ...\n  ..$ pop      : num [1:142] 25268405 3508512 31287142 10866106 38331121 ...\n  ..$ gdpPercap: num [1:142] 727 4604 5288 2773 8798 ...\n  ..- attr(*, \"spec\")=\n  .. .. cols(\n  .. ..   country = col_character(),\n  .. ..   continent = col_character(),\n  .. ..   lifeExp = col_double(),\n  .. ..   pop = col_double(),\n  .. ..   gdpPercap = col_double()\n  .. .. )\n  ..- attr(*, \"problems\")=&lt;externalptr&gt; \n $ : spc_tbl_ [142 × 5] (S3: spec_tbl_df/tbl_df/tbl/data.frame)\n  ..$ country  : chr [1:142] \"Afghanistan\" \"Albania\" \"Algeria\" \"Angola\" ...\n  ..$ continent: chr [1:142] \"Asia\" \"Europe\" \"Africa\" \"Africa\" ...\n  ..$ lifeExp  : num [1:142] 43.8 76.4 72.3 42.7 75.3 ...\n  ..$ pop      : num [1:142] 31889923 3600523 33333216 12420476 40301927 ...\n  ..$ gdpPercap: num [1:142] 975 5937 6223 4797 12779 ...\n  ..- attr(*, \"spec\")=\n  .. .. cols(\n  .. ..   country = col_character(),\n  .. ..   continent = col_character(),\n  .. ..   lifeExp = col_double(),\n  .. ..   pop = col_double(),\n  .. ..   gdpPercap = col_double()\n  .. .. )\n  ..- attr(*, \"problems\")=&lt;externalptr&gt; \n\n\nWe got a list with 12 data frames. To access the first element of the list, we would call files[[1]]. For further work with lists and map() functions, it is worth remembering that the elements of a list are called with the double square brackets.\nTo combine all data frames in a list, we can use list_rbind():\n\ngapminder_df &lt;- map(paths, ~read_csv(.x)) |&gt; \n  list_rbind()\n\nRows: 142 Columns: 5\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (2): country, continent\ndbl (3): lifeExp, pop, gdpPercap\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\nRows: 142 Columns: 5\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (2): country, continent\ndbl (3): lifeExp, pop, gdpPercap\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\nRows: 142 Columns: 5\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (2): country, continent\ndbl (3): lifeExp, pop, gdpPercap\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\nRows: 142 Columns: 5\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (2): country, continent\ndbl (3): lifeExp, pop, gdpPercap\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\nRows: 142 Columns: 5\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (2): country, continent\ndbl (3): lifeExp, pop, gdpPercap\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\nRows: 142 Columns: 5\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (2): country, continent\ndbl (3): lifeExp, pop, gdpPercap\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\nRows: 142 Columns: 5\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (2): country, continent\ndbl (3): lifeExp, pop, gdpPercap\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\nRows: 142 Columns: 5\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (2): country, continent\ndbl (3): lifeExp, pop, gdpPercap\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\nRows: 142 Columns: 5\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (2): country, continent\ndbl (3): lifeExp, pop, gdpPercap\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\nRows: 142 Columns: 5\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (2): country, continent\ndbl (3): lifeExp, pop, gdpPercap\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\nRows: 142 Columns: 5\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (2): country, continent\ndbl (3): lifeExp, pop, gdpPercap\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\nRows: 142 Columns: 5\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (2): country, continent\ndbl (3): lifeExp, pop, gdpPercap\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\nglimpse(gapminder_df)\n\nRows: 1,704\nColumns: 5\n$ country   &lt;chr&gt; \"Afghanistan\", \"Albania\", \"Algeria\", \"Angola\", \"Argentina\", …\n$ continent &lt;chr&gt; \"Asia\", \"Europe\", \"Africa\", \"Africa\", \"Americas\", \"Oceania\",…\n$ lifeExp   &lt;dbl&gt; 28.801, 55.230, 43.077, 30.015, 62.485, 69.120, 66.800, 50.9…\n$ pop       &lt;dbl&gt; 8425333, 1282697, 9279525, 4232095, 17876956, 8691212, 69277…\n$ gdpPercap &lt;dbl&gt; 779.4453, 1601.0561, 2449.0082, 3520.6103, 5911.3151, 10039.…\n\n\nBut we somehow lost the information about the year. To fix it, we store the file names in the data frame. First step is to set names of the list elements of paths, the basename() function extracts just the file name from the path. Second, we save the names in a resulting data frame to a column called year.\n\ngapminder_df &lt;- paths |&gt; \n  set_names(basename) |&gt; \n  map(~read_csv(.x)) |&gt; \n  list_rbind(names_to = 'year')\n\nRows: 142 Columns: 5\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (2): country, continent\ndbl (3): lifeExp, pop, gdpPercap\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\nRows: 142 Columns: 5\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (2): country, continent\ndbl (3): lifeExp, pop, gdpPercap\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\nRows: 142 Columns: 5\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (2): country, continent\ndbl (3): lifeExp, pop, gdpPercap\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\nRows: 142 Columns: 5\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (2): country, continent\ndbl (3): lifeExp, pop, gdpPercap\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\nRows: 142 Columns: 5\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (2): country, continent\ndbl (3): lifeExp, pop, gdpPercap\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\nRows: 142 Columns: 5\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (2): country, continent\ndbl (3): lifeExp, pop, gdpPercap\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\nRows: 142 Columns: 5\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (2): country, continent\ndbl (3): lifeExp, pop, gdpPercap\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\nRows: 142 Columns: 5\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (2): country, continent\ndbl (3): lifeExp, pop, gdpPercap\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\nRows: 142 Columns: 5\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (2): country, continent\ndbl (3): lifeExp, pop, gdpPercap\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\nRows: 142 Columns: 5\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (2): country, continent\ndbl (3): lifeExp, pop, gdpPercap\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\nRows: 142 Columns: 5\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (2): country, continent\ndbl (3): lifeExp, pop, gdpPercap\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\nRows: 142 Columns: 5\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (2): country, continent\ndbl (3): lifeExp, pop, gdpPercap\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\nglimpse(gapminder_df)\n\nRows: 1,704\nColumns: 6\n$ year      &lt;chr&gt; \"gapminder_1952.csv\", \"gapminder_1952.csv\", \"gapminder_1952.…\n$ country   &lt;chr&gt; \"Afghanistan\", \"Albania\", \"Algeria\", \"Angola\", \"Argentina\", …\n$ continent &lt;chr&gt; \"Asia\", \"Europe\", \"Africa\", \"Africa\", \"Americas\", \"Oceania\",…\n$ lifeExp   &lt;dbl&gt; 28.801, 55.230, 43.077, 30.015, 62.485, 69.120, 66.800, 50.9…\n$ pop       &lt;dbl&gt; 8425333, 1282697, 9279525, 4232095, 17876956, 8691212, 69277…\n$ gdpPercap &lt;dbl&gt; 779.4453, 1601.0561, 2449.0082, 3520.6103, 5911.3151, 10039.…\n\n\nStill not perfect, it would be nice to extract just the year from the file name. The easiest way to do it in this case is to use the parse_number() function that extracts just a number from a string:\n\ngapminder_df &lt;- paths |&gt; \n  set_names(basename) |&gt; \n  map(~read_csv(.x)) |&gt; \n  list_rbind(names_to = 'year') |&gt; \n  mutate(year = parse_number(year))\n\nRows: 142 Columns: 5\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (2): country, continent\ndbl (3): lifeExp, pop, gdpPercap\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\nRows: 142 Columns: 5\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (2): country, continent\ndbl (3): lifeExp, pop, gdpPercap\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\nRows: 142 Columns: 5\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (2): country, continent\ndbl (3): lifeExp, pop, gdpPercap\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\nRows: 142 Columns: 5\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (2): country, continent\ndbl (3): lifeExp, pop, gdpPercap\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\nRows: 142 Columns: 5\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (2): country, continent\ndbl (3): lifeExp, pop, gdpPercap\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\nRows: 142 Columns: 5\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (2): country, continent\ndbl (3): lifeExp, pop, gdpPercap\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\nRows: 142 Columns: 5\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (2): country, continent\ndbl (3): lifeExp, pop, gdpPercap\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\nRows: 142 Columns: 5\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (2): country, continent\ndbl (3): lifeExp, pop, gdpPercap\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\nRows: 142 Columns: 5\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (2): country, continent\ndbl (3): lifeExp, pop, gdpPercap\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\nRows: 142 Columns: 5\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (2): country, continent\ndbl (3): lifeExp, pop, gdpPercap\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\nRows: 142 Columns: 5\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (2): country, continent\ndbl (3): lifeExp, pop, gdpPercap\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\nRows: 142 Columns: 5\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (2): country, continent\ndbl (3): lifeExp, pop, gdpPercap\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\nglimpse(gapminder_df)\n\nRows: 1,704\nColumns: 6\n$ year      &lt;dbl&gt; 1952, 1952, 1952, 1952, 1952, 1952, 1952, 1952, 1952, 1952, …\n$ country   &lt;chr&gt; \"Afghanistan\", \"Albania\", \"Algeria\", \"Angola\", \"Argentina\", …\n$ continent &lt;chr&gt; \"Asia\", \"Europe\", \"Africa\", \"Africa\", \"Americas\", \"Oceania\",…\n$ lifeExp   &lt;dbl&gt; 28.801, 55.230, 43.077, 30.015, 62.485, 69.120, 66.800, 50.9…\n$ pop       &lt;dbl&gt; 8425333, 1282697, 9279525, 4232095, 17876956, 8691212, 69277…\n$ gdpPercap &lt;dbl&gt; 779.4453, 1601.0561, 2449.0082, 3520.6103, 5911.3151, 10039.…\n\n\nIt might be a good idea to save the resulting data frame as a single csv file now to make future data loading easier.\n\nwrite_csv(gapminder_df, 'data/gapminder_clean/gapminder.csv')\n\npurrr contains not only the map() function, but also it relatives, so we will look at the differences between them now:\n\nmap() makes a list\nmap_lgl() makes a logical vector\nmap_int() makes an integer vector\nmap_dbl() makes a double vector\nmap_chr() makes a character vector\n\nEach of the above-mentioned functions takes a vector input, applies a function to each element and returns a vector of the same length.\n\nmap2() takes two vectors, usually of the same length and iterates over two arguments at a time\n\nAnd there is also a group of walk() functions, which return their side-effects and return the input .x. They might be used, for example, for saving multiple files or plots.\nLet’s say, we want to save our gapminder data divided by continent. We first make a nested data frame by continent. This is something similar to group_by(), we take a variable that makes groups in our dataset and divide the rest of the data according to this variable. The grouping variable stays in one column, and a smaller data frame is created for each level of this variable. All these smaller data frames are stored in the data column. We now want to save each of these smaller data frames as a separate csv file. We now create a column, where we define a path for each file to be saved.\n\ngapminder_nest &lt;- gapminder_df |&gt; \n  nest(data = -continent) |&gt; \n  mutate(path = paste0('data/gapminder_continent/gapminder_', continent, '.csv')) \n\nglimpse(gapminder_nest)\n\nRows: 5\nColumns: 3\n$ continent &lt;chr&gt; \"Asia\", \"Europe\", \"Africa\", \"Americas\", \"Oceania\"\n$ data      &lt;list&gt; [&lt;tbl_df[396 x 5]&gt;], [&lt;tbl_df[360 x 5]&gt;], [&lt;tbl_df[624 x 5]&gt;…\n$ path      &lt;chr&gt; \"data/gapminder_continent/gapminder_Asia.csv\", \"data/gapmin…\n\n\nWe can see that the data column is a list containing tibbles with different numbers of rows, but the same number of columns. To look at one of them we need to use the [[]] again.\n\ngapminder_nest$data[[1]]\n\n# A tibble: 396 × 5\n    year country          lifeExp       pop gdpPercap\n   &lt;dbl&gt; &lt;chr&gt;              &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;\n 1  1952 Afghanistan         28.8   8425333      779.\n 2  1952 Bahrain             50.9    120447     9867.\n 3  1952 Bangladesh          37.5  46886859      684.\n 4  1952 Cambodia            39.4   4693836      368.\n 5  1952 China               44   556263527      400.\n 6  1952 Hong Kong, China    61.0   2125900     3054.\n 7  1952 India               37.4 372000000      547.\n 8  1952 Indonesia           37.5  82052000      750.\n 9  1952 Iran                44.9  17272000     3035.\n10  1952 Iraq                45.3   5441766     4130.\n# ℹ 386 more rows\n\n\nAnd we can save all the tibbles in separate csv files at once using the walk2() call, which at each step takes one tibble from the data column and one path definition from the path column and runs the write_csv() function with these two arguments.\n\nwalk2(gapminder_nest$data, gapminder_nest$path, ~write_csv(.x, .y))\n\nThe work with nested data frames becomes really helpful when we want to perform the same calculation many times. We will work with the gapminder data again and try to answer the following questions: How does life expectancy change over time in individual countries? In which countries has the life expectancy risen the most over time?\nTo explore the data a little bit first, we can plot them:\n\ngapminder_df |&gt; \n  ggplot(aes(year, lifeExp, group = country)) +\n  geom_line()\n\n\n\n\n\n\n\n\nOverall, life expectancy has been steadily increasing over time, but we need some estimation of the trend in individual countries. A possible way to do this would be to fit a linear model to the data from each country and look at the estimate. Given the 142 countries in the dataset, we really do not want to run the code for each one manually with copy-pasted code. Because we want to work at the country level, we will now nest our data by country. To calculate a linear model for data from each country, we will iterate over the data column and save the resulting model to a new column. This might be done with map() within the mutate() call.\n\nby_country &lt;- gapminder_df |&gt; \n  nest(data = -country) |&gt; \n  mutate(m = map(data, ~lm(lifeExp~year, data = .x)))\n\nThe column m we just created is again a list and contains the results of linear models for the relationship between life expectancy and time for all countries. With each one of them, we can do whatever is possible with a model result:\n\nsummary(by_country$m[[1]])\n\n\nCall:\nlm(formula = lifeExp ~ year, data = .x)\n\nResiduals:\n    Min      1Q  Median      3Q     Max \n-1.5447 -0.9905 -0.2757  0.8847  1.6868 \n\nCoefficients:\n              Estimate Std. Error t value Pr(&gt;|t|)    \n(Intercept) -507.53427   40.48416  -12.54 1.93e-07 ***\nyear           0.27533    0.02045   13.46 9.84e-08 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 1.223 on 10 degrees of freedom\nMultiple R-squared:  0.9477,    Adjusted R-squared:  0.9425 \nF-statistic: 181.2 on 1 and 10 DF,  p-value: 9.835e-08\n\n\nTo easily extract the estimates from the model, we will use tidy() function from the broom package. broom is not a part of the tidyverse, but it is a related package, which becomes very helpful when working with models within the tidyverse workflow, because it provides tools to convert statistical objects into tidy tibbles. The tidy() function summarizes information about the model components:\n\ntidy(by_country$m[[1]])\n\n# A tibble: 2 × 5\n  term        estimate std.error statistic      p.value\n  &lt;chr&gt;          &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;        &lt;dbl&gt;\n1 (Intercept) -508.      40.5        -12.5 0.000000193 \n2 year           0.275    0.0205      13.5 0.0000000984\n\n\nAnd we can again use it to iterate over all models to get these summaries for all countries.\n\nby_country &lt;- gapminder_df |&gt; \n  nest(data = -country) |&gt; \n  mutate(m = map(data, ~lm(lifeExp~year, data = .x)), \n         m_tidy = map(m, ~tidy(.x)))\n\nglimpse(by_country)\n\nRows: 142\nColumns: 4\n$ country &lt;chr&gt; \"Afghanistan\", \"Albania\", \"Algeria\", \"Angola\", \"Argentina\", \"A…\n$ data    &lt;list&gt; [&lt;tbl_df[12 x 5]&gt;], [&lt;tbl_df[12 x 5]&gt;], [&lt;tbl_df[12 x 5]&gt;], […\n$ m       &lt;list&gt; [-507.5342716, 0.2753287, -1.10629487, -0.95193823, -0.663581…\n$ m_tidy  &lt;list&gt; [&lt;tbl_df[2 x 5]&gt;], [&lt;tbl_df[2 x 5]&gt;], [&lt;tbl_df[2 x 5]&gt;], [&lt;tb…\n\n\nThe summary is now in a tibble, but there is still a list of tibbles in the m_tidy column. To get the results to a data frame where we can sort the values and filter across all values, we need to unnest().\n\nby_country &lt;- gapminder_df |&gt; \n  nest(data = -country) |&gt; \n  mutate(m = map(data, ~lm(lifeExp~year, data = .x)), \n         m_tidy = map(m, ~tidy(.x))) |&gt; \n  unnest(m_tidy)\n\nglimpse(by_country)\n\nRows: 284\nColumns: 8\n$ country   &lt;chr&gt; \"Afghanistan\", \"Afghanistan\", \"Albania\", \"Albania\", \"Algeria…\n$ data      &lt;list&gt; [&lt;tbl_df[12 x 5]&gt;], [&lt;tbl_df[12 x 5]&gt;], [&lt;tbl_df[12 x 5]&gt;],…\n$ m         &lt;list&gt; [-507.5342716, 0.2753287, -1.10629487, -0.95193823, -0.6635…\n$ term      &lt;chr&gt; \"(Intercept)\", \"year\", \"(Intercept)\", \"year\", \"(Intercept)\",…\n$ estimate  &lt;dbl&gt; -507.5342716, 0.2753287, -594.0725110, 0.3346832, -1067.8590…\n$ std.error &lt;dbl&gt; 40.484161954, 0.020450934, 65.655359062, 0.033166387, 43.802…\n$ statistic &lt;dbl&gt; -12.536613, 13.462890, -9.048348, 10.091036, -24.379118, 25.…\n$ p.value   &lt;dbl&gt; 1.934055e-07, 9.835213e-08, 3.943337e-06, 1.462763e-06, 3.07…\n\n\nWe now have a column for each column originally included in the tibbles inside m_tidy. The list-columns we did not unnest still remain list-columns. There are now two rows for each country, one for each model coefficient - the intercept and the year. We are not interested in model intercepts now, so we can filter them out. To see in which countries has the life expectancy risen the most over time, we can arrange the dataset according to the model estimate.\n\nby_country &lt;- gapminder_df |&gt; \n  nest(data = -country) |&gt; \n  mutate(m = map(data, ~lm(lifeExp~year, data = .x)), \n         m_tidy = map(m, ~tidy(.x))) |&gt; \n  unnest(m_tidy) |&gt; \n  filter(term == 'year') |&gt; \n  arrange(desc(estimate))\n\nglimpse(by_country)\n\nRows: 142\nColumns: 8\n$ country   &lt;chr&gt; \"Oman\", \"Vietnam\", \"Saudi Arabia\", \"Indonesia\", \"Libya\", \"Ye…\n$ data      &lt;list&gt; [&lt;tbl_df[12 x 5]&gt;], [&lt;tbl_df[12 x 5]&gt;], [&lt;tbl_df[12 x 5]&gt;],…\n$ m         &lt;list&gt; [-1470.085705, 0.772179, 0.3702564, -0.9886387, -1.7645338,…\n$ term      &lt;chr&gt; \"year\", \"year\", \"year\", \"year\", \"year\", \"year\", \"year\", \"yea…\n$ estimate  &lt;dbl&gt; 0.7721790, 0.6716154, 0.6496231, 0.6346413, 0.6255357, 0.605…\n$ std.error &lt;dbl&gt; 0.039265234, 0.021970572, 0.034812325, 0.010796685, 0.025754…\n$ statistic &lt;dbl&gt; 19.665718, 30.568863, 18.660721, 58.781125, 24.288551, 22.82…\n$ p.value   &lt;dbl&gt; 2.530346e-09, 3.289412e-11, 4.221338e-09, 4.931386e-14, 3.18…\n\n\nOr we can just print out the top 10 countries:\n\nby_country |&gt; slice_max(estimate, n = 10)\n\n# A tibble: 10 × 8\n   country            data     m     term  estimate std.error statistic  p.value\n   &lt;chr&gt;              &lt;list&gt;   &lt;lis&gt; &lt;chr&gt;    &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;    &lt;dbl&gt;\n 1 Oman               &lt;tibble&gt; &lt;lm&gt;  year     0.772    0.0393      19.7 2.53e- 9\n 2 Vietnam            &lt;tibble&gt; &lt;lm&gt;  year     0.672    0.0220      30.6 3.29e-11\n 3 Saudi Arabia       &lt;tibble&gt; &lt;lm&gt;  year     0.650    0.0348      18.7 4.22e- 9\n 4 Indonesia          &lt;tibble&gt; &lt;lm&gt;  year     0.635    0.0108      58.8 4.93e-14\n 5 Libya              &lt;tibble&gt; &lt;lm&gt;  year     0.626    0.0258      24.3 3.19e-10\n 6 Yemen, Rep.        &lt;tibble&gt; &lt;lm&gt;  year     0.605    0.0265      22.8 5.87e-10\n 7 West Bank and Gaza &lt;tibble&gt; &lt;lm&gt;  year     0.601    0.0332      18.1 5.59e- 9\n 8 Tunisia            &lt;tibble&gt; &lt;lm&gt;  year     0.588    0.0261      22.5 6.64e-10\n 9 Gambia             &lt;tibble&gt; &lt;lm&gt;  year     0.582    0.0192      30.3 3.57e-11\n10 Jordan             &lt;tibble&gt; &lt;lm&gt;  year     0.572    0.0319      17.9 6.31e- 9\n\n\nThe use of nested data frames and broom has great potential. Depending on the question, it is possible to filter only significant results, select models with the highest explanatory power, etc. To learn more about the automatisation using purrr and running many models, look here: https://r4ds.hadley.nz/iteration.html, https://adv-r.hadley.nz/functionals.html, https://r4ds.had.co.nz/many-models.html, https://www.tmwr.org.",
    "crumbs": [
      "Data Manipulation and Visualization",
      "7 Automatisation"
    ]
  },
  {
    "objectID": "DataManipulationVisualisation/7_automatisation.html#exercises",
    "href": "DataManipulationVisualisation/7_automatisation.html#exercises",
    "title": "7 Automatisation",
    "section": "7.4 Exercises",
    "text": "7.4 Exercises\n\nRewrite the following code as a function:\n\nx / sum(x, na.rm = T)*100\ny / sum(y, na.rm = T)*100\nz / sum(z, na.rm = T)*100\n\nUse the function to calculate the percentage of each species in the penguins dataset.\nWrite your own function that takes a numeric vector of temperatures in Fahrenheit and returns them converted to Celsius using the formula \\(C = (F-32) *5/9\\). Test it with the following values: 0°F, 20°F, 68°F, 86°F, 100°F.\n* Write a function that calculates the Shannon diversity index using the formula \\(H' = -∑p_i ln(p_i)\\). Use the function to calculate Shannon diversity of each plot in the sand vegetation dataset.\nTake the Pokémon dataset and visualise the distribution of defense power of water-type Pokémon. Turn this code into a function that helps you draw a histogram of defense power for different Pokémon types. * Try to generalize the code so that you can plot a distribution of any numerical variable.\nUse the function in a for loop and create plots of the distribution of defense power for all Pokémon types. * Save all plots in a plots folder.\nDo the same using purrr functions.",
    "crumbs": [
      "Data Manipulation and Visualization",
      "7 Automatisation"
    ]
  },
  {
    "objectID": "DataManipulationVisualisation/7_automatisation.html#further-reading",
    "href": "DataManipulationVisualisation/7_automatisation.html#further-reading",
    "title": "7 Automatisation",
    "section": "Further reading",
    "text": "Further reading\nR for Data Science: https://r4ds.hadley.nz/program.html\nHands on Programming with R: https://rstudio-education.github.io/hopr\nAdvanced R: https://adv-r.hadley.nz\nProgramming with dplyr: https://dplyr.tidyverse.org/articles/programming.html\nProgramming with tidyr: https://tidyr.tidyverse.org/articles/programming.html\nProgramming with ggplot2: https://ggplot2-book.org/programming.html\nTidy modeling with R: https://www.tmwr.org",
    "crumbs": [
      "Data Manipulation and Visualization",
      "7 Automatisation"
    ]
  }
]