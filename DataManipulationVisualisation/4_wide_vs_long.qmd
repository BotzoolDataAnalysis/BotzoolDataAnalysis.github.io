---
title: "4 Wide vs long format"
---

## 4.1 Data formats

There are two main ways how the data can be organised across rows and columns. Wide or long format.

![](images/clipboard-1688243952.png)

**Wide format** is more conservative and used in many older packages for ecological data analysis. This is the way you need to prepare your species matrix for ordinations in `vegan`. However, wide format has also many cons.

One of them is the size of the file. In the example above, there are abundance of given plants in each of the site. When the species is present in just one site, here *Trientalis europaea*, it is still keeping space across the whole table, where there can be hundreds or thousands of sites. And this has to be coded within the table becoming really memory demanding.

For the analyses you cannot keep the empty cells empty, since they are recognised as NAs. You have to fill them with zeros.

Another disadvantage is that you cannot add easily new information. If you for example want to separate species that are in a tree vegetation layer (recognised in vegetation ecology as 1), herb layer (6) and moss layer (9), you would have to add this information to the name of the species e.g. *Picea_abies_1*. Can you see a conflict with the basic principles of tidyverse?

![](images/clipboard-1429419654.png)

**Long format** is great for handling large datasets. Imagine we have more sites than those shown in the example above. In this format, we list all the species for Site1, then for Site2 etc. But we list only the species that are really present! By simple count of the rows belonging to each site you have the information about overall species richness.

We can also add any information, describing the data, such as vegetation layers, growth forms, native/alien status etc. After that we can very simply filter, summarise and calculate further statistics.

## 4.2 From long to wide

We will first start a new script for this chapter and load the libraries. Remember to keep the script tidy and to put there remarks.

```{r}
#| warning: false
library(tidyverse)
library(readxl)
library(janitor)
```

Now, we will import the data. In the first example we will again use the `Forest understory data` from our folder: [`Link to Github folder`](https://github.com/BotzoolDataAnalysis/BotzoolDataAnalysis.github.io/tree/main/DataManipulationVisualisation/data) However, this time we will upload the species data saved in a long format and we will prepare a matrix in a wide format, so that it can be used in specific ecological analyses e.g. in `vegan`.

```{r}
spe <- read_excel("data/forest_understory/Axmanova-Forest-spe.xlsx")
tibble(spe)
```

We can see that there are plant species names sorted by RELEVE_NR, where each number indicates a vegetation record from one specific site (can be also called vegetation plot or sample). We will rename this name to make it easier for us as PlotID. Further we need to change the species names to be in the compact format with underscores. For this we will use **mutate** function with **gsub** (for string specification) indicating that each space should be changed to underscore and we will directly apply it to the original column.

```{r}
spe %>% 
  rename(PlotID= RELEVE_NR)%>%
  mutate(Species = str_replace_all(Species, " ", "_"))
```

\*If you want to play a bit, you can create new column (e.g. SpeciesNew) to see both the original name and changed name. Note that in the same way as above you can change different patterns, e.g. removing aggregates. There are even more complex things we can do, but we will keep it for later as it requires some knowledge of `regex` rules.

```{r}
spe %>% 
  rename(PlotID= RELEVE_NR)%>%
  mutate(SpeciesNew1 = str_replace_all(Species, " agg.", ""))%>%
  mutate(SpeciesNew2 = str_replace_all(Species, " ", "_"))
```

We have the condensed name with underscores, but there are still more variables in the table. We can either remove them or merge them to be included in the final wide format. Here we will go a bit against tidy rules and add the information about the vegetation layer directly to the variable Species using **unite** function from the package `tidyr` which merges strings from two or more columns into a new one: **A+B =A_B**. Default separator is again underscore, unless you specify it differently by *sep=XX* argument.

![](images/clipboard-2319886629.png)

<!--add new example with na.rm=F and with remove=T  -->

Argument *na.rm* indicates what to do if in one of the combined columns there is no value but NA. We have set this argument to TRUE to remove the NA. If you keep it FALSE it can happen that in some data the new string will be a_NA or NA_b, or even NA_NA (see line 4 of our example). *Remove* argument set to TRUE will remove the original columns which we used to combine the new one (in the example above you will have only z). In our case we will keep original columns for visual checking and we will use select function in the next step to remove them.

```{r}
spe %>% 
  rename(PlotID= RELEVE_NR)%>%
 mutate(Species = str_replace_all(Species, " ", "_"))%>%
  unite("SpeciesLayer", Species,Layer, na.rm = TRUE, remove = FALSE) 
```

At this point we have everything we need to use it as input for the wide format table: PlotID, SpeciesLayer and values of the abundance saved as CoverPerc. One more step is to select only these or to deselect (-) those not needed.

```{r}
spe %>% 
  rename(PlotID= RELEVE_NR)%>%
  mutate(Species = str_replace_all(Species, " ", "_"))%>%
  unite("SpeciesLayer", Species,Layer, na.rm = TRUE, remove = FALSE) %>%
  select(PlotID, Species, Layer)
```

Now we can finaly use the **pivot wider** function to transform the data. We have to specify from where we are taking the names of new variables (**names_from**) and from where we should take the values which should appear in the table (**values_from**).

```{r}
spe %>% 
  rename(PlotID= RELEVE_NR)%>%
  mutate(Species = str_replace_all(Species, " ", "_"))%>%
  unite("SpeciesLayer", Species,Layer, na.rm = TRUE, remove = FALSE) %>%
  select(-c(Species, Layer)) %>%
  pivot_wider(names_from = SpeciesLayer, values_from = CoverPerc)
```

There are different combinations of species in each plot, some of them are present and some not. Since we changed the format, all species, even those not occurring in that particular site/plot have to get some values. In long format abundance or some other information is not stored for absent species, so they get NAs. Therefore, one more step is to fill the empty cells by zeros using **values_fill**. In this case we can do that, because we know that if the species was absent its abundance was exactly 0.

```{r}
spe %>% 
  rename(PlotID= RELEVE_NR)%>%
  mutate(Species = str_replace_all(Species, " ", "_"))%>%
  unite("SpeciesLayer", Species,Layer, na.rm = TRUE, remove = FALSE) %>%
  select(-c(Species, Layer)) %>%
  pivot_wider(names_from = SpeciesLayer, values_from = CoverPerc,
              values_fill = 0)
```

## 4.3 From wide to long

## 4.4 Group by, count

## 4.5 Summarise

## 4.6 Exercises

<!--concatenate of forest type and name and make a boxplot -->

<!--add mutate ifelse with other symbols  -->

<!--unite and separate with different separator  -->

<!--add mutate ifelse with other symbols  -->

## 4.7 Further reading
