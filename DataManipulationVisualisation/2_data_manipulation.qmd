---
title: "2 Data Manipulation"
---
In this chapter, we will try to explore the data, prepare subsets with only selected variables and filter them to only defined cases. We will prepare new variables and rearrange the data according to them. We will also further train importing and exporting the data.  


## 2.1. Introducing dplyr
The term data manipulation might sound a bit tricky. However, it does not mean we plan to show you how to cheat and make better results. It just means we want to show you how to easily handle the data, prepare them in the form you need. 
The functions for basic data handling, namely **select, filter, mutate, arrange, slice** come from the tidyverse package called `dplyr`. Do you remember how to find out more about the package? If nothing else you can try "?dplyr" which actually gives you more hints where to look further. 


![](images/IA_clipboard2Dplyr.png){fig-align="center" width="755"}

Note that many of these operations can be done also in some table editors (eg. Excel) before importing to R. However, the effort and time demands would be much higher and would be increasing enormously with the size of the dataset. In contrast, in R you can change and rerun the steps in one pipeline and the data will be immediately ready for next analyses.   

We will need following libraries
```{r}
#| warning: false
library(tidyverse)
library(readxl)
```
and the forest dataset. Again I will import the data just once and use the pipe to test the functions/effects without actually changing the data  
```{r}
data <- read_excel("data/forest_understory/Axmanova-Forest-understory-diversity-analyses.xlsx")
names(data)
```

## 2.2 select
Select extracts columns/variables based on their names or position.
It is important to realise the difference between select and filter. Select is used to select the names of variables I want to keep in the dataset, while filter applies to rows depending on their values. 

You can select by naming the variables. Here you would appreciate the tidy style of names! Tidy names means no need to use parentheses. 
```{r}
data %>% 
  select(PlotID, ForestType, ForestTypeName) 
```

You can also select by position. However, be sure it will stay the same after all the changes you might do with the data.
```{r}
data %>% 
  select(1:3)
```
Sometimes you decide you want to get rid of some variables. Either you can name all the others which you want to keep, or you can remove those unwanted with minus sign. If it is one variable it is easy "select(-xx)", if two or more, you have to use "select(-c(xx, xy))" 
```{r}
data %>% 
  select(-c(ForestType,ForestTypeName))
```

You can also define range of variables between two of them.
```{r}
data %>%
  select(PlotID:ForestTypeName)
```

Or you can combine the approaches listed above
```{r}
data %>%
  select (PlotID, 3:6)
```  
  
Select can be also used in combination with stringr package to identify the pattern in the names.
```{r}
data %>%
  select (PlotID, starts_with("EIV"))
```  


## 2.3 arrange
This function keeps the same variables just reorders the rows according to the values we select. To see the changes at a first glance I will first select only few variables.
```{r}
data <- read_excel("data/forest_understory/Axmanova-Forest-understory-diversity-analyses.xlsx") 
data<- data %>% select(PlotID, ForestType, ForestTypeName, Biomass)
```


```{r}
data %>% 
  arrange(ForestType)
```

We can also decide to arrange the data from the highest value to the lowest, i.e. in descending order 
```{r}
data %>% 
  arrange(desc(Biomass))
```

Or we can arrange according to more variables. Here the forest type goes first, so it is more important. I added the number of rows which should be in the preview to see more of them. 
```{r}
data %>% 
  arrange(ForestTypeName, Biomass) %>% 
  print(30)
```


## 2.4 distinct
data %>%
  arrange(ForestType) %>%
  select(ForestType, ForestTypeName) %>%
  distinct() #keep only unique rows

data %>%      # same as above but shorter
  arrange(ForestType) %>%
  distinct(ForestType, ForestTypeName)



## 2.5 filter and slice
data %>% 
  filter(Biomass > 80) #[g/m2]

data %>% 
  filter(ForestTypeName %in% c("alluvial forest", "ravine forest"))

data %>% 
  filter(plotID %in% selected$plotID) #e.g. from different analysis, stratification

data %>% 
  filter(!is.na(Juveniles)) %>%
  slice_max(Juveniles, n = 3) 



## 2.6 mutate

data %>% 
  mutate(SpeciesRichness = Herbs + Juveniles)
data %>% 
  mutate(selection = 1)

data %>%
  mutate(productivity = ifelse(Biomass<60,"low","high")) %>% 
  select (PlotID, ForestTypeName, productivity) %>%
  print(n=20)

data %>% 
  select(PlotID, Herbs, Biomass, pH_KCl) %>% 
  mutate(across(c(Herbs, Biomass, pH_KCl), round))






## 2.6 Exercises
1\. **squirrel data**
Load data of squirrel observations from the [Central Park Squirrel Census](https://github.com/rfordatascience/tidytuesday/blob/main/data/2023/2023-05-23/readme.md) 
using this line: 
squirrels<- read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/main/data/2023/2023-05-23/squirrel_data.csv')
glimpse(squirrels)


2\. **iris dataset** select species names and variables describing length

glimpse(iris)
data<- iris
names(data)
data %>% 
  arrange(Sepal.Length) 

data %>% 
  arrange(Species,Sepal.Length) 

3\.  **dune from vegan package**
data<- data("dune", package = "vegan")
data<- data("dune.env", package = "vegan")
glimpse(data)


4\. **palm trees**
palmtrees <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/main/data/2025/2025-03-18/palmtrees.csv')
glimpse(palmtrees)




## 2.7 Further reading

dplyr main web page <https://dplyr.tidyverse.org>

Find dplyr Cheatsheet in Posit <https://posit.co/resources/cheatsheets/>

Chapter devoted to Data transformation in the R for data science book <https://r4ds.hadley.nz/data-transform.html>


